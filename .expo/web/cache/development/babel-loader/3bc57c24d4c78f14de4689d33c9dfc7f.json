{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport React, { Component } from \"react\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar HomeScreen = function (_Component) {\n  _inherits(HomeScreen, _Component);\n\n  var _super = _createSuper(HomeScreen);\n\n  function HomeScreen(props) {\n    var _this;\n\n    _classCallCheck(this, HomeScreen);\n\n    _this = _super.call(this, props);\n\n    _this.setModalVisible = function (visible) {\n      _this.setState({\n        modalVisible: visible\n      });\n    };\n\n    _this.state = {\n      essayText: \"\",\n      isLoading: false,\n      essayWordCount: \"\",\n      essaySentenceCount: \"\",\n      averageSentenceLength: \"\",\n      averageWordLengthCount: \"\",\n      paragraphsCount: \"\",\n      lecturerInput1: \"\",\n      lecturerInput2: \"\",\n      lecturerInput3: \"\",\n      lecturerInput4: \"\",\n      lecturerInput5: \"\",\n      lecturerInputPhrase1: \"\",\n      lecturerInputPhrase2: \"\",\n      lecturerInputPhrase3: \"\",\n      lecturerInputPhrase4: \"\",\n      lecturerInputPhrase5: \"\",\n      parametersPresentCount: 0,\n      minNumberWords: \"\",\n      maxNumberWords: \"\",\n      prepositionsCount: 0,\n      referencesCount: 0,\n      punctuationErrorCount: 0,\n      uniqueWordsPercentage: 0,\n      sentenceCount: 0,\n      overallGrade: 0,\n      errorMessage: \"Something went wrong\",\n      modalVisible: false,\n      firstIteration: true\n    };\n    return _this;\n  }\n\n  _createClass(HomeScreen, [{\n    key: \"processText\",\n    value: function processText() {\n      console.log(this.state.firstIteration);\n      this.state.firstIteration = false;\n\n      if (this.state.essayText.trim() == \"\" || isNaN(this.state.minNumberWords) || isNaN(this.state.maxNumberWords) || this.state.minNumberWords.trim() == \"\" || this.state.maxNumberWords.trim() == \"\") {\n        this.setModalVisible(true);\n        return null;\n      }\n\n      this.countWords();\n      this.averageWordLength();\n      this.countSentences();\n      this.checkForLecturersParameters();\n      this.countParagraphs();\n      this.countPrepositions();\n      this.countReferences();\n      this.countPunctuationMistakes();\n      this.calculateaAverageSentenceLength();\n      this.percentageUniqueWords();\n      this.calculateFinalGrade();\n      var results = {\n        essayWordCount: this.state.essayWordCount,\n        sentenceCount: this.state.sentenceCount,\n        paragraphsCount: this.state.paragraphsCount,\n        prepositionsCount: this.state.prepositionsCount,\n        referencesCount: this.state.referencesCount,\n        averageSentenceLength: this.state.averageSentenceLength,\n        averageWordLengthCount: this.state.averageWordLengthCount,\n        keyTermsPresent: this.state.keyTermsPresent,\n        keyPhrasesPresent: this.state.keyPhrasesPresent,\n        punctuationErrorCount: this.state.punctuationErrorCount,\n        uniqueWordsPercentage: this.state.uniqueWordsPercentage,\n        overallGrade: this.state.overallGrade\n      };\n      this.props.navigation.navigate(\"Feedback\", {\n        results: results\n      });\n    }\n  }, {\n    key: \"calculateFinalGrade\",\n    value: function calculateFinalGrade() {\n      var essayLengthRules = 0;\n\n      if (this.state.maxNumberWords <= 800) {\n        essayLengthRules = 500;\n      } else if (this.state.maxNumberWords <= 1400 || this.state.minNumberWords >= 800 && this.state.minNumberWords <= 1000) {\n        essayLengthRules = 1000;\n      } else if (this.state.maxNumberWords > 1500 && this.state.maxNumberWords < 2000 && this.state.minNumberWords > 1000) {\n        essayLengthRules = 1500;\n      } else if (this.state.maxNumberWords > 2000) {\n        essayLengthRules = 2000;\n      } else {\n        essayLengthRules = 500;\n      }\n\n      var grades = {\n        essayWordCount: 0,\n        keyTermsGrade: 0,\n        keyPhrasesGrade: 0,\n        punctuationGrade: 0,\n        referencesGrades: 0,\n        paragraphsGrade: 0,\n        percentageUniqueWordsGrade: 0,\n        prepositionGrade: 0,\n        sentenceCountGrade: 0,\n        averageSentenceLengthGrade: 0,\n        averageWordLengthGrade: 0\n      };\n\n      if (this.state.essayWordCount >= this.state.minNumberWords && this.state.essayWordCount <= this.state.maxNumberWords) {\n        grades.essayWordCount = 100;\n      } else if (this.state.essayWordCount >= this.state.minNumberWords * 90 / 100 && this.state.essayWordCount <= this.state.maxNumberWords * 110 / 100) {\n        grades.essayWordCount = 75;\n      } else if (this.state.essayWordCount >= this.state.minNumberWords * 70 / 100 && this.state.essayWordCount <= this.state.maxNumberWords * 130 / 100) {\n        grades.essayWordCount = 50;\n      } else if (this.state.essayWordCount < this.state.minNumberWords * 70 / 100 || this.state.essayWordCount > this.state.maxNumberWords * 130 / 100) {\n        grades.essayWordCount = 25;\n      }\n\n      if (this.state.keyTermsPresent == 5) {\n        grades.keyTermsGrade = 100;\n      } else if (this.state.keyTermsPresent == 4) {\n        grades.keyTermsGrade = 75;\n      } else if (this.state.keyTermsPresent >= 2) {\n        grades.keyTermsGrade = 50;\n      } else if (this.state.keyTermsPresent == 1) {\n        grades.keyTermsGrade = 25;\n      } else {\n        grades.keyTermsGrade = 0;\n      }\n\n      if (this.state.keyPhrasesPresent == 5) {\n        grades.keyPhrasesGrade = 100;\n      } else if (this.state.keyPhrasesPresent == 4) {\n        grades.keyPhrasesGrade = 75;\n      } else if (this.state.keyPhrasesPresent >= 2) {\n        grades.keyPhrasesGrade = 50;\n      } else if (this.state.keyPhrasesPresent == 1) {\n        grades.keyPhrasesGrade = 25;\n      } else {\n        grades.keyPhrasesGrade = 0;\n      }\n\n      if (this.state.punctuationErrorCount == 0) {\n        grades.punctuationGrade = 100;\n      } else if (this.state.punctuationErrorCount == 1 || this.state.punctuationErrorCount == 2) {\n        grades.punctuationGrade = 75;\n      } else if (this.state.punctuationErrorCount > 2 && this.state.punctuationErrorCount <= 6) {\n        grades.punctuationGrade = 50;\n      } else if (this.state.punctuationErrorCount > 6 && this.state.punctuationErrorCount < 10) {\n        grades.punctuationGrade = 25;\n      } else {\n        grades.punctuationGrade = 0;\n      }\n\n      if (essayLengthRules == 500) {\n        if (this.state.referencesCount >= 3) {\n          grades.referencesGrades = 100;\n        } else if (this.state.referencesCount == 2) {\n          grades.referencesGrades = 75;\n        } else if (this.state.referencesCount == 1) {\n          grades.referencesGrades = 50;\n        } else if (this.state.referencesCount == 0) {\n          grades.referencesGrades = 25;\n        }\n      }\n\n      if (essayLengthRules == 1000) {\n        if (this.state.referencesCount >= 5) {\n          grades.referencesGrades = 100;\n        } else if (this.state.referencesCount >= 3) {\n          grades.referencesGrades = 75;\n        } else if (this.state.referencesCount == 2) {\n          grades.referencesGrades = 50;\n        } else if (this.state.referencesCount < 2) {\n          grades.referencesGrades = 25;\n        } else if (this.state.referencesCount == 0) {\n          grades.referencesGrades = 0;\n        }\n      }\n\n      if (essayLengthRules >= 1500) {\n        if (this.state.referencesCount >= 7) {\n          grades.referencesGrades = 100;\n        } else if (this.state.referencesCount >= 5) {\n          grades.referencesGrades = 75;\n        } else if (this.state.referencesCount >= 3) {\n          grades.referencesGrades = 50;\n        } else if (this.state.referencesCount >= 1) {\n          grades.referencesGrades = 25;\n        } else if (this.state.referencesCount == 0) {\n          grades.referencesGrades = 0;\n        }\n      }\n\n      if (this.state.paragraphsCount >= 3) {\n        grades.paragraphsGrade = 100;\n      } else if (this.state.paragraphsCount == 2) {\n        grades.paragraphsGrade = 50;\n      } else if (this.state.paragraphsCount < 2) {\n        grades.paragraphsGrade = 0;\n      }\n\n      if (this.state.uniqueWordsPercentage >= 45) {\n        grades.percentageUniqueWordsGrade = 100;\n      } else if (this.state.uniqueWordsPercentage > 25) {\n        grades.percentageUniqueWordsGrade = 75;\n      } else if (this.state.uniqueWordsPercentage > 20) {\n        grades.percentageUniqueWordsGrade = 50;\n      } else if (this.state.uniqueWordsPercentage <= 20) {\n        grades.percentageUniqueWordsGrade = 25;\n      }\n\n      var wordsPerPreposition = Math.round(this.state.essayWordCount / this.state.prepositionsCount);\n\n      if (wordsPerPreposition >= 10 && wordsPerPreposition <= 15) {\n        grades.prepositionGrade = 100;\n      } else if (wordsPerPreposition < 5 || wordsPerPreposition > 30) {\n        grades.prepositionGrade = 25;\n      } else if (wordsPerPreposition < 8 || wordsPerPreposition > 25) {\n        grades.prepositionGrade = 50;\n      } else if (wordsPerPreposition < 10 || wordsPerPreposition > 15) {\n        grades.prepositionGrade = 75;\n      }\n\n      var sentencePerParagraphAverage = Math.round(this.state.sentenceCount / this.state.paragraphsCount);\n\n      if (sentencePerParagraphAverage >= 3 && sentencePerParagraphAverage <= 5) {\n        grades.sentenceCountGrade = 100;\n      } else if (sentencePerParagraphAverage >= 2 && sentencePerParagraphAverage <= 7) {\n        grades.sentenceCountGrade = 50;\n      } else {\n        grades.sentenceCountGrade = 25;\n      }\n\n      if (this.state.averageSentenceLength >= 15 && this.state.averageSentenceLength <= 20) {\n        grades.averageSentenceLengthGrade = 100;\n      } else if (this.state.averageSentenceLength >= 10 && this.state.averageSentenceLength <= 25) {\n        grades.averageSentenceLengthGrade = 75;\n      } else {\n        grades.averageSentenceLengthGrade = 50;\n      }\n\n      if (this.state.averageWordLengthCount >= 5 && this.state.averageWordLengthCount <= 12) {\n        grades.averageWordLengthGrade = 100;\n      } else if (this.state.averageWordLengthCount >= 4 && this.state.averageWordLengthCount <= 16) {\n        grades.averageWordLengthGrade = 75;\n      } else {\n        grades.averageWordLengthGrade = 50;\n      }\n\n      var weights = {\n        essayWordCount: 0.12,\n        sentenceCount: 0.03,\n        paragraphsCount: 0.12,\n        prepositionCount: 0.04,\n        referencesCount: 0.1,\n        averageSentenceLength: 0.06,\n        averageWordLength: 0.04,\n        percentageUniqueWords: 0.04,\n        keyTermsPresent: 0.17,\n        keyPhrasesPresent: 0.17,\n        punctuationErrorCount: 0.15\n      };\n      var grade = grades.essayWordCount * weights.essayWordCount + grades.keyTermsGrade * weights.keyTermsPresent + grades.keyPhrasesGrade * weights.keyPhrasesPresent + grades.punctuationGrade * weights.punctuationErrorCount + grades.referencesGrades * weights.referencesCount + grades.paragraphsGrade * weights.paragraphsCount + grades.percentageUniqueWordsGrade * weights.percentageUniqueWords + grades.prepositionGrade * weights.prepositionCount + grades.sentenceCountGrade * weights.sentenceCount + grades.averageSentenceLengthGrade * weights.averageSentenceLength + grades.averageWordLengthGrade * weights.averageWordLength;\n      this.state.overallGrade = (grade / 10).toFixed(1);\n    }\n  }, {\n    key: \"calculateaAverageSentenceLength\",\n    value: function calculateaAverageSentenceLength() {\n      this.state.averageSentenceLength = Math.round(this.state.essayWordCount / this.state.sentenceCount);\n    }\n  }, {\n    key: \"countPunctuationMistakes\",\n    value: function countPunctuationMistakes() {\n      var _this2 = this;\n\n      var essay = this.state.essayText;\n      var pattern = new RegExp(/[.?!]{2,}/g);\n      var punctuationPotentialErrorsArray = essay.match(pattern);\n      var correctPuntuationArray = [\"?!\", \"...\", \").\", \")?\", \")!\", \")...\", \")?!\", \".(\", \"?(\", \"!(\", \"...(\", \"?!(\", \"].\", \"]...\", \"]?\", \"]!\", \"]?!\", \".[\", \"...[\", \"?[\", \"![\", \"?![\", '\".', '\"?', '\"!', '\"?!', '...\"', '.\"', '?\"', '!\"', '?!\"', '...\"'];\n\n      if (punctuationPotentialErrorsArray != null) {\n        punctuationPotentialErrorsArray.forEach(function (element) {\n          if (!correctPuntuationArray.includes(element)) {\n            _this2.state.punctuationErrorCount += 1;\n          }\n        });\n      }\n    }\n  }, {\n    key: \"countReferences\",\n    value: function countReferences() {\n      var essay = this.state.essayText;\n      var pattern = new RegExp(/\\(\\D+\\d{4}\\)/g);\n      var citations = essay.match(pattern);\n\n      if (citations == null) {\n        this.state.referencesCount = 0;\n      } else {\n        this.state.referencesCount = citations.length;\n      }\n    }\n  }, {\n    key: \"percentageUniqueWords\",\n    value: function percentageUniqueWords() {\n      var essay = this.state.essayText;\n      var wordOccurancesCount = {};\n      essay = essay.replace(/[^a-zA-Z0-9 ]/g, \"\");\n      essay = essay.replace(/[ ]{2,}/g, \" \");\n      essay = essay.toLowerCase();\n      essay = essay.split(\" \");\n      essay.sort();\n\n      for (var _iterator = _createForOfIteratorHelperLoose(essay), _step; !(_step = _iterator()).done;) {\n        var word = _step.value;\n\n        if (wordOccurancesCount[word]) {\n          wordOccurancesCount[word] += 1;\n        } else {\n          wordOccurancesCount[word] = 1;\n        }\n      }\n\n      var uniqueWordsCount = 0;\n\n      for (var wordKey in wordOccurancesCount) {\n        if (wordOccurancesCount[wordKey] == 1) {\n          uniqueWordsCount += 1;\n        }\n      }\n\n      var wordOccurancesCountLength = Object.keys(wordOccurancesCount).length;\n      var percentageUniqueWords = Math.round(uniqueWordsCount / wordOccurancesCountLength * 100);\n      this.state.uniqueWordsPercentage = percentageUniqueWords;\n    }\n  }, {\n    key: \"countWords\",\n    value: function countWords() {\n      var essay = this.state.essayText;\n      essay = essay.replace(/[^a-zA-Z0-9 ]/g, \"\");\n      essay = essay.replace(/[ ]{2,}/g, \" \");\n      this.state.essayWordCount = essay.split(\" \").length;\n    }\n  }, {\n    key: \"averageWordLength\",\n    value: function averageWordLength() {\n      var essay = this.state.essayText;\n      essay = essay.replace(/[^a-zA-Z0-9 ]/g, \"\");\n      essay = essay.replace(/[ ]{2,}/g, \" \");\n      essay = essay.split(\" \");\n      var totalWordLength = 0;\n      essay.forEach(function (word) {\n        totalWordLength += word.length;\n      });\n      this.state.averageWordLengthCount = Math.round(totalWordLength / this.state.essayWordCount);\n    }\n  }, {\n    key: \"countSentences\",\n    value: function countSentences() {\n      var essay = this.state.essayText;\n      var sentences = essay.match(/\\w[.!?]\\s*\\$*/g);\n\n      if (sentences != null) {\n        this.state.sentenceCount = essay.match(/\\w[.!?]\\s*\\$*/g).length;\n      } else {\n        this.state.sentenceCount = 0;\n      }\n    }\n  }, {\n    key: \"checkForLecturersParameters\",\n    value: function checkForLecturersParameters() {\n      this.state.parametersPresentCount = 0;\n      var lecturerParameteres = [this.state.lecturerInput1, this.state.lecturerInput2, this.state.lecturerInput3, this.state.lecturerInput4, this.state.lecturerInput5];\n      var lecturerParameteresPhrases = [this.state.lecturerInputPhrase1, this.state.lecturerInputPhrase2, this.state.lecturerInputPhrase3, this.state.lecturerInputPhrase4, this.state.lecturerInputPhrase5];\n      var keyTermsPresent = 0;\n      var keyPhrasesPresent = 0;\n\n      for (var i = 0; i < lecturerParameteres.length; i++) {\n        keyTermsPresent += this.checkForParameter(lecturerParameteres[i]);\n      }\n\n      for (var _i = 0; _i < lecturerParameteresPhrases.length; _i++) {\n        keyPhrasesPresent += this.checkForParameter(lecturerParameteresPhrases[_i]);\n      }\n\n      this.state.keyTermsPresent = keyTermsPresent;\n      this.state.keyPhrasesPresent = keyPhrasesPresent;\n    }\n  }, {\n    key: \"checkForParameter\",\n    value: function checkForParameter(keyTerm) {\n      var parametersCount = 0;\n      var essayLowerCaps = this.state.essayText.toLowerCase();\n      var essay = essayLowerCaps;\n      essay = essay.replace(/[^a-zA-Z0-9 ]/g, \"\");\n      essay = essay.replace(/[ ]{2,}/g, \" \");\n      var wordPattern = \"\";\n\n      if (keyTerm != \"\") {\n        keyTerm = keyTerm.toLowerCase();\n\n        if (keyTerm.match(/^[a-zA-Z]*$/) == null) {\n          if (essayLowerCaps.includes(keyTerm)) {\n            parametersCount += 1;\n          }\n        } else {\n          wordPattern = new RegExp(\"( |^)\" + keyTerm + \"( |$)\");\n\n          if (essay.match(wordPattern) != null) {\n            parametersCount += 1;\n          }\n        }\n      }\n\n      return parametersCount;\n    }\n  }, {\n    key: \"countPrepositions\",\n    value: function countPrepositions() {\n      var _this3 = this;\n\n      var essay = this.state.essayText.toLowerCase();\n      var prepositions = [\"About\", \"After\", \"Ago\", \"Around\", \"At\", \"Before\", \"By\", \"Circa\", \"During\", \"Following\", \"For\", \"From\", \"Gone\", \"In\", \"On\", \"Past\", \"Prior to\", \"Since\", \"Until\", \"till\", \"Up to\", \"Up until\", \"Aboard\", \"Above\", \"Across\", \"Against\", \"Alongside\", \"Amid\", \"Among\", \"Apart from\", \"Astride\", \"At\", \"Atop\", \"Behind\", \"Below\", \"Beneath\", \"Beside\", \"Between\", \"Beyond\", \"By\", \"Close to\", \"Far\", \"Far from\", \"Forward of\", \"From\", \"In\", \"In between\", \"In front of\", \"Inside\", \"Into\", \"Minus\", \"Near\", \"Near to\", \"Next to\", \"Of\", \"Off\", \"On\", \"On board\", \"On top of\", \"Onto\", \"Upon\", \"Opposite\", \"Out\", \"Out of\", \"Outside\", \"Outside of\", \"Over\", \"Round\", \"Through\", \"Throughout\", \"To\", \"Together with\", \"Toward\", \"towards\", \"Under\", \"Underneath\", \"Up against\", \"With\", \"Within\", \"Without\", \"Above\", \"Across\", \"Against\", \"Ahead\", \"Along\", \"Along with\", \"Amid\", \"Around\", \"Away\", \"Away from\", \"Behind\", \"Below\", \"Beneath\", \"By means of\", \"Down\", \"Further to\", \"In between\", \"Into\", \"Off\", \"Off of\", \"On\", \"Onto\", \"Over\", \"Out of\", \"Past\", \"Round\", \"Through\", \"Toward/towards\", \"Under\", \"Up\", \"Via\", \"About\", \"According to\", \"Anti\", \"As\", \"As for\", \"As per\", \"As to\", \"As well as\", \"Aside from\", \"Bar\", \"Barring\", \"Because of\", \"Besides\", \"But for\", \"By\", \"But\", \"Concerning\", \"Considering\", \"Contrary to\", \"Counting\", \"Cum\", \"Depending on\", \"Despite\", \"Due to\", \"Except\", \"Except for\", \"Excepting\", \"Excluding\", \"Given\", \"In addition to\", \"in case of\", \"In face of\", \"In favor of\", \"in favour of\", \"In light of\", \"In spite of\", \"In view of\", \"Including\", \"Instead of\", \"Less\", \"Like\", \"Notwithstanding\", \"Of\", \"On account of\", \"On behalf of\", \"Other than\", \"Owing to\", \"Pending\", \"Per\", \"Plus\", \"Preparatory to\", \"Pro\", \"Re\", \"Regarding\", \"Regardless of\", \"Save\", \"Save for\", \"Saving\", \"Than\", \"Thanks to\", \"Unlike\", \"Versus\", \"With\", \"With reference to\", \"With regard to\", \"Worth\"];\n      var multiWordsPrepositions = [\"Prior to\", \"Up to\", \"Up until\", \"Apart from\", \"Close to\", \"Far from\", \"Forward of\", \"In between\", \"In front of\", \"Near to\", \"Next to\", \"On board\", \"On top of\", \"Out of\", \"Outside of\", \"Together with\", \"Up against\", \"Along with\", \"Away from\", \"By means of\", \"Further to\", \"In between\", \"Off of\", \"Out of\", \"According to\", \"As for\", \"As per\", \"As to\", \"As well as\", \"Aside from\", \"Because of\", \"But for\", \"Contrary to\", \"Depending on\", \"Due to\", \"Except for\", \"In addition to\", \"in case of\", \"In face of\", \"In favor of\", \"in favour of\", \"In light of\", \"In spite of\", \"In view of\", \"Instead of\", \"On account of\", \"On behalf of\", \"Other than\", \"Owing to\", \"Preparatory to\", \"Regardless of\", \"Save for\", \"Thanks to\", \"With reference to\", \"With regard to\"];\n      var singleWordPrepositions = [\"About\", \"After\", \"Ago\", \"Around\", \"At\", \"Before\", \"By\", \"Circa\", \"During\", \"Following\", \"For\", \"From\", \"Gone\", \"In\", \"On\", \"Past\", \"Since\", \"Until\", \"till\", \"Aboard\", \"Above\", \"Across\", \"Against\", \"Alongside\", \"Amid\", \"Among\", \"Astride\", \"Atop\", \"Below\", \"Beneath\", \"Beside\", \"Between\", \"Beyond\", \"Far\", \"Inside\", \"Minus\", \"Near\", \"Upon\", \"Opposite\", \"Out\", \"Outside\", \"Over\", \"Through\", \"Throughout\", \"To\", \"Toward\", \"towards\", \"Underneath\", \"With\", \"Within\", \"Without\", \"Ahead\", \"Along\", \"Away\", \"Behind\", \"Down\", \"Into\", \"Off\", \"Onto\", \"Round\", \"Under\", \"Up\", \"Via\", \"Anti\", \"As\", \"Bar\", \"Barring\", \"Besides\", \"But\", \"Concerning\", \"Considering\", \"Counting\", \"Cum\", \"Despite\", \"Except\", \"Excepting\", \"Excluding\", \"Given\", \"Including\", \"Less\", \"Like\", \"Notwithstanding\", \"Of\", \"Pending\", \"Per\", \"Plus\", \"Pro\", \"Re\", \"Regarding\", \"Save\", \"Saving\", \"Than\", \"Unlike\", \"Versus\", \"Worth\"];\n      var pattern = \"\";\n      var prepositionsPresent = [];\n      multiWordsPrepositions.forEach(function (preposition) {\n        pattern = new RegExp(preposition.toLowerCase(), \"g\");\n\n        if (essay.match(pattern) != null) {\n          _this3.state.prepositionsCount += essay.match(pattern).length;\n          prepositionsPresent.push(preposition);\n        }\n      });\n      prepositionsPresent.forEach(function (preposition) {\n        essay = essay.replaceAll(preposition.toLowerCase(), \"\");\n      });\n      singleWordPrepositions.forEach(function (preposition) {\n        var prepositionPattern = new RegExp(\"( |^)\" + preposition.toLowerCase() + \"( |$)\");\n\n        if (essay.match(prepositionPattern)) {\n          _this3.state.prepositionsCount += 1;\n        }\n      });\n    }\n  }, {\n    key: \"countParagraphs\",\n    value: function countParagraphs() {\n      this.state.paragraphsCount = this.state.essayText.split(/\\n/).length;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var modalVisible = this.state.modalVisible;\n      return _jsxs(View, {\n        style: styles.body,\n        children: [this.state.modalVisible ? _jsx(Modal, {\n          animationType: \"slide\",\n          transparent: true,\n          visible: modalVisible,\n          onRequestClose: function onRequestClose() {\n            _this4.setModalVisible(!modalVisible);\n          },\n          children: _jsx(View, {\n            style: styles.modalContainer,\n            children: _jsxs(View, {\n              style: styles.modalView,\n              children: [_jsxs(Text, {\n                style: styles.modalText,\n                children: [this.state.errorMessage, \" \"]\n              }), _jsx(Button, {\n                title: \"OK\",\n                onPress: function onPress() {\n                  return _this4.setModalVisible(!modalVisible);\n                }\n              })]\n            })\n          })\n        }) : null, _jsx(Text, {\n          style: styles.title,\n          children: \"AUTOMATED ESSAY MARKING SYSTEM\"\n        }), _jsxs(View, {\n          style: styles.container,\n          children: [_jsx(View, {\n            style: styles.row,\n            children: _jsx(Text, {\n              style: styles.subtitle,\n              children: \"INSERT ESSAY\"\n            })\n          }), _jsx(View, {\n            style: styles.row,\n            children: _jsx(TextInput, {\n              style: styles.input,\n              multiline: true,\n              onChangeText: function onChangeText(essayText) {\n                return _this4.setState({\n                  essayText: essayText\n                });\n              },\n              value: this.state.essayText,\n              maxLength: 10000\n            })\n          }), _jsx(View, {\n            style: styles.row,\n            children: _jsx(Text, {\n              style: styles.subtitle,\n              children: \"INSERT TOPIC RELATED WORDS\"\n            })\n          }), _jsxs(View, {\n            style: styles.row,\n            children: [_jsxs(View, {\n              children: [_jsx(Text, {\n                style: styles.label,\n                children: \"Key term 1:\"\n              }), _jsx(TextInput, {\n                style: styles.lecturerInput,\n                onChangeText: function onChangeText(lecturerInput1) {\n                  return _this4.setState({\n                    lecturerInput1: lecturerInput1\n                  });\n                },\n                value: this.state.lecturerInput1\n              })]\n            }), _jsxs(View, {\n              children: [_jsx(Text, {\n                style: styles.label,\n                children: \"Key term 2:\"\n              }), _jsx(TextInput, {\n                style: styles.lecturerInput,\n                onChangeText: function onChangeText(lecturerInput2) {\n                  return _this4.setState({\n                    lecturerInput2: lecturerInput2\n                  });\n                },\n                value: this.state.lecturerInput2\n              })]\n            }), _jsxs(View, {\n              children: [_jsx(Text, {\n                style: styles.label,\n                children: \"Key term 3:\"\n              }), _jsx(TextInput, {\n                style: styles.lecturerInput,\n                onChangeText: function onChangeText(lecturerInput3) {\n                  return _this4.setState({\n                    lecturerInput3: lecturerInput3\n                  });\n                },\n                value: this.state.lecturerInput3\n              })]\n            }), _jsxs(View, {\n              children: [_jsx(Text, {\n                style: styles.label,\n                children: \"Key term 4:\"\n              }), _jsx(TextInput, {\n                style: styles.lecturerInput,\n                onChangeText: function onChangeText(lecturerInput4) {\n                  return _this4.setState({\n                    lecturerInput4: lecturerInput4\n                  });\n                },\n                value: this.state.lecturerInput4\n              })]\n            }), _jsxs(View, {\n              children: [_jsx(Text, {\n                style: styles.label,\n                children: \"Key term 5:\"\n              }), _jsx(TextInput, {\n                style: styles.lecturerInput,\n                onChangeText: function onChangeText(lecturerInput5) {\n                  return _this4.setState({\n                    lecturerInput5: lecturerInput5\n                  });\n                },\n                value: this.state.lecturerInput5\n              })]\n            })]\n          }), _jsx(View, {\n            style: styles.row,\n            children: _jsx(Text, {\n              style: styles.subtitle,\n              children: \"INSERT TOPIC RELATED PHRASES\"\n            })\n          }), _jsxs(View, {\n            style: styles.row,\n            children: [_jsxs(View, {\n              children: [_jsx(Text, {\n                style: styles.label,\n                children: \"Key phrase 1:\"\n              }), _jsx(TextInput, {\n                style: styles.lecturerInput,\n                onChangeText: function onChangeText(lecturerInputPhrase1) {\n                  return _this4.setState({\n                    lecturerInputPhrase1: lecturerInputPhrase1\n                  });\n                },\n                value: this.state.lecturerInputPhrase1\n              })]\n            }), _jsxs(View, {\n              children: [_jsx(Text, {\n                style: styles.label,\n                children: \"Key phrase 2:\"\n              }), _jsx(TextInput, {\n                style: styles.lecturerInput,\n                onChangeText: function onChangeText(lecturerInputPhrase2) {\n                  return _this4.setState({\n                    lecturerInputPhrase2: lecturerInputPhrase2\n                  });\n                },\n                value: this.state.lecturerInputPhrase2\n              })]\n            }), _jsxs(View, {\n              children: [_jsx(Text, {\n                style: styles.label,\n                children: \"Key phrase 3:\"\n              }), _jsx(TextInput, {\n                style: styles.lecturerInput,\n                onChangeText: function onChangeText(lecturerInputPhrase3) {\n                  return _this4.setState({\n                    lecturerInputPhrase3: lecturerInputPhrase3\n                  });\n                },\n                value: this.state.lecturerInputPhrase3\n              })]\n            }), _jsxs(View, {\n              children: [_jsx(Text, {\n                style: styles.label,\n                children: \"Key phrase 4:\"\n              }), _jsx(TextInput, {\n                style: styles.lecturerInput,\n                onChangeText: function onChangeText(lecturerInputPhrase4) {\n                  return _this4.setState({\n                    lecturerInputPhrase4: lecturerInputPhrase4\n                  });\n                },\n                value: this.state.lecturerInputPhrase4\n              })]\n            }), _jsxs(View, {\n              children: [_jsx(Text, {\n                style: styles.label,\n                children: \"Key phrase 5:\"\n              }), _jsx(TextInput, {\n                style: styles.lecturerInput,\n                onChangeText: function onChangeText(lecturerInputPhrase5) {\n                  return _this4.setState({\n                    lecturerInputPhrase5: lecturerInputPhrase5\n                  });\n                },\n                value: this.state.lecturerInputPhrase5\n              })]\n            })]\n          }), _jsx(View, {\n            style: styles.row,\n            children: _jsx(Text, {\n              style: styles.subtitle,\n              children: \"INSERT EXPECTED WORD COUNT RANGE\"\n            })\n          }), _jsxs(View, {\n            style: styles.rowStart,\n            children: [_jsxs(View, {\n              children: [_jsx(Text, {\n                style: styles.label,\n                children: \"Min:\"\n              }), _jsx(TextInput, {\n                style: styles.lecturerInput,\n                onChangeText: function onChangeText(minNumberWords) {\n                  return _this4.setState({\n                    minNumberWords: minNumberWords\n                  });\n                },\n                value: this.state.minNumberWords,\n                keyboardType: \"numeric\",\n                maxLength: 5\n              })]\n            }), _jsxs(View, {\n              children: [_jsx(Text, {\n                style: styles.label,\n                children: \"Max:\"\n              }), _jsx(TextInput, {\n                style: styles.lecturerInput,\n                onChangeText: function onChangeText(maxNumberWords) {\n                  return _this4.setState({\n                    maxNumberWords: maxNumberWords\n                  });\n                },\n                value: this.state.maxNumberWords,\n                keyboardType: \"numeric\",\n                maxLength: 5\n              })]\n            })]\n          }), _jsx(View, {\n            style: styles.rowEnd,\n            children: _jsx(TouchableOpacity, {\n              style: styles.primaryButton,\n              onPress: function onPress() {\n                return _this4.processText();\n              },\n              children: _jsx(Text, {\n                style: styles.buttonText,\n                children: \"SUBMIT\"\n              })\n            })\n          })]\n        })]\n      });\n    }\n  }]);\n\n  return HomeScreen;\n}(Component);\n\nexport default HomeScreen;\nvar styles = StyleSheet.create({\n  body: {\n    backgroundColor: \"#F5F5F5\",\n    minHeight: \"100%\"\n  },\n  input: {\n    height: 500,\n    fontSize: 16,\n    padding: 10,\n    backgroundColor: \"#ffffff\",\n    width: \"100%\",\n    borderWidth: 3,\n    borderColor: \"#ABABAB\",\n    boxShadow: \"0px 4px 4px rgba(0, 0, 0, 0.25)\",\n    color: \"#444444\",\n    lineHeight: 25\n  },\n  container: {\n    flex: 1,\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    marginTop: 10,\n    maxWidth: 1100,\n    width: \"100%\",\n    margin: \"auto\",\n    marginBottom: 50,\n    backgroundColor: \"#F1F1F1\",\n    paddingLeft: 40,\n    paddingRight: 40,\n    paddingBottom: 20,\n    boxShadow: \"0px 4px 10px rgba(0, 0, 0, 0.25)\"\n  },\n  row: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    width: \"100%\",\n    flexWrap: \"wrap\",\n    gap: 8\n  },\n  rowEnd: {\n    flexDirection: \"row\",\n    justifyContent: \"end\",\n    width: \"100%\"\n  },\n  rowStart: {\n    flexDirection: \"row\",\n    width: \"100%\",\n    flexWrap: \"wrap\",\n    gap: 25,\n    marginBottom: 25\n  },\n  rowVertical: {\n    flexDirection: \"columns\",\n    justifyContent: \"space-between\",\n    marginTop: 40,\n    backgroundColor: \"#E9E9E9\"\n  },\n  lecturerInput: {\n    backgroundColor: \"#ffffff\",\n    padding: 7,\n    marginBottom: 10,\n    borderWidth: 2,\n    borderColor: \"#ABABAB\",\n    color: \"#444444\"\n  },\n  title: {\n    backgroundColor: \"#E9E9E9\",\n    fontSize: 30,\n    width: \"100%\",\n    textAlign: \"center\",\n    padding: 40,\n    fontStyle: \"normal\",\n    fontWeight: 600,\n    fontSize: 40,\n    lineHeight: 47,\n    letterSpacing: \"0.325em\",\n    color: \"#2EA7EB\",\n    boxShadow: \"0px 10px 5px rgba(0, 0, 0, 0.25)\",\n    marginBottom: 20\n  },\n  primaryButton: {\n    textAlign: \"center\",\n    minWidth: 169,\n    padding: 8,\n    backgroundColor: \"#FFFFFF\",\n    borderWidth: 2.5,\n    borderColor: \"#2EA7EB\"\n  },\n  buttonText: {\n    color: \"#2EA7EB\",\n    fontSize: \"14\",\n    letterSpacing: 1.25\n  },\n  subtitle: {\n    fontStyle: \"normal\",\n    fontWeight: 400,\n    fontSize: 20,\n    lineHeight: 18,\n    letterSpacing: \"0.16em\",\n    marginTop: 30,\n    marginBottom: 10,\n    color: \"#2EA7EB\"\n  },\n  label: {\n    fontStyle: \"normal\",\n    fontWeight: 400,\n    lineHeight: 18,\n    marginBottom: 2,\n    color: \"#444444\"\n  },\n  centeredView: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginTop: 22\n  },\n  modalView: {\n    margin: 20,\n    backgroundColor: \"white\",\n    borderRadius: 20,\n    padding: 35,\n    alignItems: \"center\",\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5\n  },\n  button: {\n    borderRadius: 20,\n    padding: 10,\n    elevation: 2\n  },\n  buttonOpen: {\n    backgroundColor: \"#F194FF\"\n  },\n  buttonClose: {\n    backgroundColor: \"#2196F3\"\n  },\n  textStyle: {\n    color: \"white\",\n    fontWeight: \"bold\",\n    textAlign: \"center\"\n  },\n  modalText: {\n    marginBottom: 15,\n    textAlign: \"center\"\n  },\n  modalContainer: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    margintop: \"10\"\n  },\n  modalView: {\n    margin: \"20\",\n    backgroundColor: \"red\",\n    padding: \"140\",\n    alignItems: \"center\",\n    border: \"2\"\n  }\n});","map":{"version":3,"sources":["/Users/andreifrandes/AutomatedEssayGradingSystem/Home.js"],"names":["React","Component","HomeScreen","props","setModalVisible","visible","setState","modalVisible","state","essayText","isLoading","essayWordCount","essaySentenceCount","averageSentenceLength","averageWordLengthCount","paragraphsCount","lecturerInput1","lecturerInput2","lecturerInput3","lecturerInput4","lecturerInput5","lecturerInputPhrase1","lecturerInputPhrase2","lecturerInputPhrase3","lecturerInputPhrase4","lecturerInputPhrase5","parametersPresentCount","minNumberWords","maxNumberWords","prepositionsCount","referencesCount","punctuationErrorCount","uniqueWordsPercentage","sentenceCount","overallGrade","errorMessage","firstIteration","console","log","trim","isNaN","countWords","averageWordLength","countSentences","checkForLecturersParameters","countParagraphs","countPrepositions","countReferences","countPunctuationMistakes","calculateaAverageSentenceLength","percentageUniqueWords","calculateFinalGrade","results","keyTermsPresent","keyPhrasesPresent","navigation","navigate","essayLengthRules","grades","keyTermsGrade","keyPhrasesGrade","punctuationGrade","referencesGrades","paragraphsGrade","percentageUniqueWordsGrade","prepositionGrade","sentenceCountGrade","averageSentenceLengthGrade","averageWordLengthGrade","wordsPerPreposition","Math","round","sentencePerParagraphAverage","weights","prepositionCount","grade","toFixed","essay","pattern","RegExp","punctuationPotentialErrorsArray","match","correctPuntuationArray","forEach","element","includes","citations","length","wordOccurancesCount","replace","toLowerCase","split","sort","word","uniqueWordsCount","wordKey","wordOccurancesCountLength","Object","keys","totalWordLength","sentences","lecturerParameteres","lecturerParameteresPhrases","i","checkForParameter","keyTerm","parametersCount","essayLowerCaps","wordPattern","prepositions","multiWordsPrepositions","singleWordPrepositions","prepositionsPresent","preposition","push","replaceAll","prepositionPattern","styles","body","modalContainer","modalView","modalText","title","container","row","subtitle","input","label","lecturerInput","rowStart","rowEnd","primaryButton","processText","buttonText","StyleSheet","create","backgroundColor","minHeight","height","fontSize","padding","width","borderWidth","borderColor","boxShadow","color","lineHeight","flex","flexDirection","alignItems","marginTop","maxWidth","margin","marginBottom","paddingLeft","paddingRight","paddingBottom","justifyContent","flexWrap","gap","rowVertical","textAlign","fontStyle","fontWeight","letterSpacing","minWidth","centeredView","borderRadius","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","button","buttonOpen","buttonClose","textStyle","margintop","border"],"mappings":"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","sourcesContent":["import {\n  StyleSheet,\n  Text,\n  View,\n  TextInput,\n  TouchableOpacity,\n  Modal,\n  Alert,\n  Pressable,\n  Button,\n} from \"react-native\";\nimport React, { Component } from \"react\";\n\nclass HomeScreen extends Component {\n  constructor(props) {\n    super(props);\n    // Store a number of parameters required by the algorithm inside the state\n    this.state = {\n      essayText: \"\",\n      isLoading: false,\n      essayWordCount: \"\",\n      essaySentenceCount: \"\",\n      averageSentenceLength: \"\",\n      averageWordLengthCount: \"\",\n      paragraphsCount: \"\",\n      // Store the input from the lecturer\n      lecturerInput1: \"\",\n      lecturerInput2: \"\",\n      lecturerInput3: \"\",\n      lecturerInput4: \"\",\n      lecturerInput5: \"\",\n      lecturerInputPhrase1: \"\",\n      lecturerInputPhrase2: \"\",\n      lecturerInputPhrase3: \"\",\n      lecturerInputPhrase4: \"\",\n      lecturerInputPhrase5: \"\",\n      // Keep track of the parameters present in the essay\n      parametersPresentCount: 0,\n      // Keep track of the range of words the lecturer expects the essay to be\n      minNumberWords: \"\",\n      maxNumberWords: \"\",\n      prepositionsCount: 0,\n      referencesCount: 0,\n      punctuationErrorCount: 0,\n      uniqueWordsPercentage: 0,\n      sentenceCount: 0,\n      overallGrade: 0,\n      // Alert box flag\n      errorMessage: \"Something went wrong\",\n      modalVisible: false,\n      firstIteration: true,\n      // modalVisible: true,\n    };\n  }\n\n  // Add a toggle function to set the visibility for the user alerts\n  setModalVisible = (visible) => {\n    this.setState({ modalVisible: visible });\n  };\n\n  // main function calling all the necesarry functions for extracting the features\n  processText() {\n    console.log(this.state.firstIteration);\n    this.state.firstIteration = false;\n\n    // check if the essay, minimum and maximum word range inputs have been added\n    if (\n      this.state.essayText.trim() == \"\" ||\n      isNaN(this.state.minNumberWords) ||\n      isNaN(this.state.maxNumberWords) ||\n      this.state.minNumberWords.trim() == \"\" ||\n      this.state.maxNumberWords.trim() == \"\"\n    ) {\n      this.setModalVisible(true);\n      return null;\n    }\n\n    // Count the total number of words\n    this.countWords();\n\n    // calculate the average word length\n    this.averageWordLength();\n\n    // Count the total number of sentences\n    this.countSentences();\n\n    // Check how many of the lecture's parameters are present inside the essay\n    this.checkForLecturersParameters();\n\n    // Count the number of paragraphs\n    this.countParagraphs();\n\n    // Count the number of prepositions\n    this.countPrepositions();\n\n    // Count the number of references\n    this.countReferences();\n\n    // Count the number of punctuation errors\n    this.countPunctuationMistakes();\n\n    // Calculate the average sentece length\n    this.calculateaAverageSentenceLength();\n\n    // Calculate the percentage of unique words\n    this.percentageUniqueWords();\n\n    // Calculate the overall grade of the essay\n    this.calculateFinalGrade();\n\n    // Store the data about all the features extracted to be send to the feedback page\n    const results = {\n      essayWordCount: this.state.essayWordCount,\n      sentenceCount: this.state.sentenceCount,\n      paragraphsCount: this.state.paragraphsCount,\n      prepositionsCount: this.state.prepositionsCount,\n      referencesCount: this.state.referencesCount,\n      averageSentenceLength: this.state.averageSentenceLength,\n      averageWordLengthCount: this.state.averageWordLengthCount,\n      keyTermsPresent: this.state.keyTermsPresent,\n      keyPhrasesPresent: this.state.keyPhrasesPresent,\n      punctuationErrorCount: this.state.punctuationErrorCount,\n      uniqueWordsPercentage: this.state.uniqueWordsPercentage,\n      overallGrade: this.state.overallGrade,\n    };\n\n    // Direct the user to the feedback page and pass the results to that file\n    this.props.navigation.navigate(\"Feedback\", {\n      results: results,\n    });\n  }\n\n  // Compute the final grade\n  calculateFinalGrade() {\n    // Create a general set of variable that gives different rules for the essay depending on its length\n    let essayLengthRules = 0;\n\n    // Decide which catergory the essay should belong to during the calculations by the words range provided by the user\n    if (this.state.maxNumberWords <= 800) {\n      essayLengthRules = 500;\n    } else if (\n      this.state.maxNumberWords <= 1400 ||\n      (this.state.minNumberWords >= 800 && this.state.minNumberWords <= 1000)\n    ) {\n      essayLengthRules = 1000;\n    } else if (\n      this.state.maxNumberWords > 1500 &&\n      this.state.maxNumberWords < 2000 &&\n      this.state.minNumberWords > 1000\n    ) {\n      essayLengthRules = 1500;\n    } else if (this.state.maxNumberWords > 2000) {\n      essayLengthRules = 2000;\n    } else {\n      essayLengthRules = 500;\n    }\n\n    // Create an object to store the grade for each feature\n    let grades = {\n      essayWordCount: 0,\n      keyTermsGrade: 0,\n      keyPhrasesGrade: 0,\n      punctuationGrade: 0,\n      referencesGrades: 0,\n      paragraphsGrade: 0,\n      percentageUniqueWordsGrade: 0,\n      prepositionGrade: 0,\n      sentenceCountGrade: 0,\n      averageSentenceLengthGrade: 0,\n      averageWordLengthGrade: 0,\n    };\n\n    // -----------------------------\n    // Calculate the grade for the word count\n    // -----------------------------\n    // Excelent - 100 points\n    // If the word count is in the range expected by the educator\n    if (\n      this.state.essayWordCount >= this.state.minNumberWords &&\n      this.state.essayWordCount <= this.state.maxNumberWords\n    ) {\n      grades.essayWordCount = 100;\n    }\n    // Accomplishes - 75 points\n    // If the word count is in 10 % range of the expected word count\n    else if (\n      this.state.essayWordCount >= (this.state.minNumberWords * 90) / 100 &&\n      this.state.essayWordCount <= (this.state.maxNumberWords * 110) / 100\n    ) {\n      grades.essayWordCount = 75;\n    }\n\n    // Capable - 50 points\n    // If the word count is off by more than 10% and less than 30%\n    else if (\n      this.state.essayWordCount >= (this.state.minNumberWords * 70) / 100 &&\n      this.state.essayWordCount <= (this.state.maxNumberWords * 130) / 100\n    ) {\n      grades.essayWordCount = 50;\n    }\n\n    // Beginner - 25 points\n    // If the word count is off by more than 35 percent\n    else if (\n      this.state.essayWordCount < (this.state.minNumberWords * 70) / 100 ||\n      this.state.essayWordCount > (this.state.maxNumberWords * 130) / 100\n    ) {\n      grades.essayWordCount = 25;\n    }\n\n    // -----------------------------\n    // Calculate grade for key terms\n    // -----------------------------\n    // Assign differnt grades depending on how many of the topic terms are present in the essay\n    if (this.state.keyTermsPresent == 5) {\n      grades.keyTermsGrade = 100;\n    } else if (this.state.keyTermsPresent == 4) {\n      grades.keyTermsGrade = 75;\n    } else if (this.state.keyTermsPresent >= 2) {\n      grades.keyTermsGrade = 50;\n    } else if (this.state.keyTermsPresent == 1) {\n      grades.keyTermsGrade = 25;\n    } else {\n      grades.keyTermsGrade = 0;\n    }\n    // -----------------------------\n    // Calculate grade for key phrases\n    // -----------------------------\n    // Assign differnt grades depending on how many of the topic phrases are present in the essay\n    if (this.state.keyPhrasesPresent == 5) {\n      grades.keyPhrasesGrade = 100;\n    } else if (this.state.keyPhrasesPresent == 4) {\n      grades.keyPhrasesGrade = 75;\n    } else if (this.state.keyPhrasesPresent >= 2) {\n      grades.keyPhrasesGrade = 50;\n    } else if (this.state.keyPhrasesPresent == 1) {\n      grades.keyPhrasesGrade = 25;\n    } else {\n      grades.keyPhrasesGrade = 0;\n    }\n\n    // -------------------------------\n    // Calculate grade for punctuation\n    // ----------------------–--------\n    // Assign differnt grades depending on how many punctuation mistakes the user has\n    if (this.state.punctuationErrorCount == 0) {\n      grades.punctuationGrade = 100;\n    } else if (\n      this.state.punctuationErrorCount == 1 ||\n      this.state.punctuationErrorCount == 2\n    ) {\n      grades.punctuationGrade = 75;\n    } else if (\n      this.state.punctuationErrorCount > 2 &&\n      this.state.punctuationErrorCount <= 6\n    ) {\n      grades.punctuationGrade = 50;\n    } else if (\n      this.state.punctuationErrorCount > 6 &&\n      this.state.punctuationErrorCount < 10\n    ) {\n      grades.punctuationGrade = 25;\n    } else {\n      grades.punctuationGrade = 0;\n    }\n\n    // -------------------------------\n    // Calculate grade for references count\n    // ----------------------–--------\n\n    // Rules of reference count for essays in the 500 words range\n    if (essayLengthRules == 500) {\n      // 100 - Excelente ecenariot\n      if (this.state.referencesCount >= 3) {\n        grades.referencesGrades = 100;\n      } else if (this.state.referencesCount == 2) {\n        grades.referencesGrades = 75;\n      } else if (this.state.referencesCount == 1) {\n        grades.referencesGrades = 50;\n      } else if (this.state.referencesCount == 0) {\n        grades.referencesGrades = 25;\n      }\n    }\n\n    // Rules of reference count for essays in the 1000 words range\n    if (essayLengthRules == 1000) {\n      // 100 - Excelente ecenariot\n      if (this.state.referencesCount >= 5) {\n        grades.referencesGrades = 100;\n      } else if (this.state.referencesCount >= 3) {\n        grades.referencesGrades = 75;\n      } else if (this.state.referencesCount == 2) {\n        grades.referencesGrades = 50;\n      } else if (this.state.referencesCount < 2) {\n        grades.referencesGrades = 25;\n      } else if (this.state.referencesCount == 0) {\n        grades.referencesGrades = 0;\n      }\n    }\n\n    // Rules of reference count for essays in the 1500 words range\n    if (essayLengthRules >= 1500) {\n      if (this.state.referencesCount >= 7) {\n        grades.referencesGrades = 100;\n      } else if (this.state.referencesCount >= 5) {\n        grades.referencesGrades = 75;\n      } else if (this.state.referencesCount >= 3) {\n        grades.referencesGrades = 50;\n      } else if (this.state.referencesCount >= 1) {\n        grades.referencesGrades = 25;\n      } else if (this.state.referencesCount == 0) {\n        grades.referencesGrades = 0;\n      }\n    }\n\n    // -------------------------------\n    // Rules for paragraphs count\n    // -------------------------------\n    //  Assign differnt grades depending on the number of paragraphs contained in the essay\n    if (this.state.paragraphsCount >= 3) {\n      grades.paragraphsGrade = 100;\n    } else if (this.state.paragraphsCount == 2) {\n      grades.paragraphsGrade = 50;\n    } else if (this.state.paragraphsCount < 2) {\n      grades.paragraphsGrade = 0;\n    }\n\n    // -------------------------------\n    // Rules of percentage of unique words\n    // -------------------------------\n    //  Assign differnt grades depending on percentage of unique words\n    if (this.state.uniqueWordsPercentage >= 45) {\n      grades.percentageUniqueWordsGrade = 100;\n    } else if (this.state.uniqueWordsPercentage > 25) {\n      grades.percentageUniqueWordsGrade = 75;\n    } else if (this.state.uniqueWordsPercentage > 20) {\n      grades.percentageUniqueWordsGrade = 50;\n    } else if (this.state.uniqueWordsPercentage <= 20) {\n      grades.percentageUniqueWordsGrade = 25;\n    }\n\n    // -------------------------------\n    // Rules of prepositons\n    // -------------------------------\n    // Calculate the raport between words and preposition, the result reresenting how many words are on average for each preposition\n    let wordsPerPreposition = Math.round(\n      this.state.essayWordCount / this.state.prepositionsCount\n    );\n\n    //  Assign differnt grades by checking if the number of prepositions for a given number of word is correct.\n    if (wordsPerPreposition >= 10 && wordsPerPreposition <= 15) {\n      grades.prepositionGrade = 100;\n    } else if (wordsPerPreposition < 5 || wordsPerPreposition > 30) {\n      grades.prepositionGrade = 25;\n    } else if (wordsPerPreposition < 8 || wordsPerPreposition > 25) {\n      grades.prepositionGrade = 50;\n    } else if (wordsPerPreposition < 10 || wordsPerPreposition > 15) {\n      grades.prepositionGrade = 75;\n    }\n\n    // -------------------------------\n    // Rules for number of sentences\n    // -------------------------------\n    // Calculate the average amount of sentences per paragraph\n    let sentencePerParagraphAverage = Math.round(\n      this.state.sentenceCount / this.state.paragraphsCount\n    );\n\n    // Assign grades for the sentence count by determining if the paragraphs have the expected number of sentences\n    if (sentencePerParagraphAverage >= 3 && sentencePerParagraphAverage <= 5) {\n      grades.sentenceCountGrade = 100;\n    } else if (\n      sentencePerParagraphAverage >= 2 &&\n      sentencePerParagraphAverage <= 7\n    ) {\n      grades.sentenceCountGrade = 50;\n    } else {\n      grades.sentenceCountGrade = 25;\n    }\n\n    // -------------------------------\n    // Rules for sentence lenght\n    // -------------------------------\n    // Assign grades for the sentence length by checking if it falls between certain word count ranges\n    if (\n      this.state.averageSentenceLength >= 15 &&\n      this.state.averageSentenceLength <= 20\n    ) {\n      grades.averageSentenceLengthGrade = 100;\n    } else if (\n      this.state.averageSentenceLength >= 10 &&\n      this.state.averageSentenceLength <= 25\n    ) {\n      grades.averageSentenceLengthGrade = 75;\n    } else {\n      grades.averageSentenceLengthGrade = 50;\n    }\n\n    // -------------------------------\n    // Rules for average word length\n    // -------------------------------\n    // Assign grades for the words length by checking if the average falls between certain expected ranges\n    if (\n      this.state.averageWordLengthCount >= 5 &&\n      this.state.averageWordLengthCount <= 12\n    ) {\n      grades.averageWordLengthGrade = 100;\n    } else if (\n      this.state.averageWordLengthCount >= 4 &&\n      this.state.averageWordLengthCount <= 16\n    ) {\n      grades.averageWordLengthGrade = 75;\n    } else {\n      grades.averageWordLengthGrade = 50;\n    }\n\n    // Set appropriate weights for each of the features depending on their importance\n    let weights = {\n      essayWordCount: 0.12,\n      sentenceCount: 0.03,\n      paragraphsCount: 0.12,\n      prepositionCount: 0.04,\n      referencesCount: 0.1,\n      averageSentenceLength: 0.06,\n      averageWordLength: 0.04,\n      percentageUniqueWords: 0.04,\n      keyTermsPresent: 0.17,\n      keyPhrasesPresent: 0.17,\n      punctuationErrorCount: 0.15,\n    };\n\n    // Calculate the overall grade by multiplying each grade by its correspondent weight, and adding them together\n    let grade =\n      grades.essayWordCount * weights.essayWordCount +\n      grades.keyTermsGrade * weights.keyTermsPresent +\n      grades.keyPhrasesGrade * weights.keyPhrasesPresent +\n      grades.punctuationGrade * weights.punctuationErrorCount +\n      grades.referencesGrades * weights.referencesCount +\n      grades.paragraphsGrade * weights.paragraphsCount +\n      grades.percentageUniqueWordsGrade * weights.percentageUniqueWords +\n      grades.prepositionGrade * weights.prepositionCount +\n      grades.sentenceCountGrade * weights.sentenceCount +\n      grades.averageSentenceLengthGrade * weights.averageSentenceLength +\n      grades.averageWordLengthGrade * weights.averageWordLength;\n\n    // Reflect the overall grade in the state to be sent to the feedback page\n    this.state.overallGrade = (grade / 10).toFixed(1);\n  }\n\n  // Calculate the average sentence length\n  calculateaAverageSentenceLength() {\n    // Divide the number of words in the essay by the number of sentnces in order to get the average sentence length\n    this.state.averageSentenceLength = Math.round(\n      this.state.essayWordCount / this.state.sentenceCount\n    );\n  }\n\n  // Count the punctuation mistakes\n  countPunctuationMistakes() {\n    let essay = this.state.essayText;\n    // define a pattern that looks for any potential punctuation mistakes\n    let pattern = new RegExp(/[.?!]{2,}/g);\n    // Find all the instances where a potential punctuation mistake could occure\n    let punctuationPotentialErrorsArray = essay.match(pattern);\n\n    // Store all the correct punctuation a sentence could end with\n    let correctPuntuationArray = [\n      \"?!\",\n      \"...\",\n      \").\",\n      \")?\",\n      \")!\",\n      \")...\",\n      \")?!\",\n      \".(\",\n      \"?(\",\n      \"!(\",\n      \"...(\",\n      \"?!(\",\n      \"].\",\n      \"]...\",\n      \"]?\",\n      \"]!\",\n      \"]?!\",\n      \".[\",\n      \"...[\",\n      \"?[\",\n      \"![\",\n      \"?![\",\n      '\".',\n      '\"?',\n      '\"!',\n      '\"?!',\n      '...\"',\n      '.\"',\n      '?\"',\n      '!\"',\n      '?!\"',\n      '...\"',\n    ];\n\n    // Check whether the sentence endings are correct or not by checking the punctuation insie the sentences against the allowed punctuation array elements\n    if (punctuationPotentialErrorsArray != null) {\n      punctuationPotentialErrorsArray.forEach((element) => {\n        if (!correctPuntuationArray.includes(element)) {\n          // If a punctuation mistake is found, reflect that in the state\n          this.state.punctuationErrorCount += 1;\n        }\n      });\n    }\n  }\n\n  // Count the number of references\n  countReferences() {\n    let essay = this.state.essayText;\n\n    // Create a pattern for detecting all the inline references\n    let pattern = new RegExp(/\\(\\D+\\d{4}\\)/g);\n\n    // Find all the inside the essay\n    let citations = essay.match(pattern);\n\n    // If citations are found, count them and relect thsis inside the state\n    if (citations == null) {\n      this.state.referencesCount = 0;\n    } else {\n      this.state.referencesCount = citations.length;\n    }\n  }\n\n  // Calculate the percenta of unique words\n  percentageUniqueWords() {\n    let essay = this.state.essayText;\n    // Create an object to store all the words inside the essay and the amount of times they are present\n    let wordOccurancesCount = {};\n    // Replace all the characters with an empty space before preceding to counting the total number of words\n    essay = essay.replace(/[^a-zA-Z0-9 ]/g, \"\");\n    // Remove multiple spaces with single space to lead to correct word count\n    essay = essay.replace(/[ ]{2,}/g, \" \");\n    // turn all the words to lowercase to ease the search\n    essay = essay.toLowerCase();\n    // split the essay into individual words\n    essay = essay.split(\" \");\n\n    // Sort the array to esay the search\n    essay.sort();\n\n    // Loop through the array of words and count how many times each of them appears in the essay\n    for (let word of essay) {\n      // check if the word is already in accounted for, otherwise add it\n      if (wordOccurancesCount[word]) {\n        // Increase the number of times the word is present\n        wordOccurancesCount[word] += 1;\n      } else {\n        // If the word is not present, add it\n        wordOccurancesCount[word] = 1;\n      }\n    }\n\n    let uniqueWordsCount = 0;\n    // loop through the object and count how many unique words there are\n    for (let wordKey in wordOccurancesCount) {\n      // Count all the unique words\n      if (wordOccurancesCount[wordKey] == 1) {\n        uniqueWordsCount += 1;\n      }\n    }\n\n    // Count the number of words, words that appear multiple times only being counted once\n    let wordOccurancesCountLength = Object.keys(wordOccurancesCount).length;\n    // Calculate what percentage of the words are unique (appear only once in the essay)\n    let percentageUniqueWords = Math.round(\n      (uniqueWordsCount / wordOccurancesCountLength) * 100\n    );\n\n    // Store the percentage of unique words inside the state\n    this.state.uniqueWordsPercentage = percentageUniqueWords;\n  }\n\n  // Count the total number of words inside the essay\n  countWords() {\n    let essay = this.state.essayText;\n    // Replace all the characters with an empty space before preceding to counting the total number of words\n    essay = essay.replace(/[^a-zA-Z0-9 ]/g, \"\");\n    // Remove multiple spaces with single space to lead to correct word count\n    essay = essay.replace(/[ ]{2,}/g, \" \");\n\n    // Store the number of words inside the state\n    this.state.essayWordCount = essay.split(\" \").length;\n  }\n\n  // Check the average length of the words\n  averageWordLength() {\n    let essay = this.state.essayText;\n\n    // Replace all the characters with an empty space before preceding to counting the total number of words\n    essay = essay.replace(/[^a-zA-Z0-9 ]/g, \"\");\n    // Remove multiple spaces with single space to lead to correct word count\n    essay = essay.replace(/[ ]{2,}/g, \" \");\n    // store all the words inside an array to be able to calculate the total number\n    essay = essay.split(\" \");\n\n    let totalWordLength = 0;\n    // Calculate the length of each word and add it together to be able to calculater the average\n    essay.forEach((word) => {\n      totalWordLength += word.length;\n    });\n\n    // Calculate the average word  lentgh by dividing the number of characters by the number of words\n    this.state.averageWordLengthCount = Math.round(\n      totalWordLength / this.state.essayWordCount\n    );\n  }\n\n  // Count the number of sentnces\n  countSentences() {\n    let essay = this.state.essayText;\n\n    // Use pattern matching to get all the sentences by checking for sentence endings symbols\n    let sentences = essay.match(/\\w[.!?]\\s*\\$*/g);\n\n    // Store the number of sentences inside the state\n    if (sentences != null) {\n      this.state.sentenceCount = essay.match(/\\w[.!?]\\s*\\$*/g).length;\n    } else {\n      this.state.sentenceCount = 0;\n    }\n  }\n\n  // Check for the topic related parameters\n  checkForLecturersParameters() {\n    this.state.parametersPresentCount = 0;\n\n    // Store all the topic key terms provided by the lecturer in an array to ease the search for individual topic terms\n    let lecturerParameteres = [\n      this.state.lecturerInput1,\n      this.state.lecturerInput2,\n      this.state.lecturerInput3,\n      this.state.lecturerInput4,\n      this.state.lecturerInput5,\n    ];\n    let lecturerParameteresPhrases = [\n      this.state.lecturerInputPhrase1,\n      this.state.lecturerInputPhrase2,\n      this.state.lecturerInputPhrase3,\n      this.state.lecturerInputPhrase4,\n      this.state.lecturerInputPhrase5,\n    ];\n\n    let keyTermsPresent = 0;\n    let keyPhrasesPresent = 0;\n    // Check how many of the key terms parameters are present inside the essay\n    for (let i = 0; i < lecturerParameteres.length; i++) {\n      keyTermsPresent += this.checkForParameter(lecturerParameteres[i]);\n    }\n\n    // Check how many of the key phrases parameters are present inside the essay\n    for (let i = 0; i < lecturerParameteresPhrases.length; i++) {\n      keyPhrasesPresent += this.checkForParameter(\n        lecturerParameteresPhrases[i]\n      );\n    }\n\n    // Reflect this inside the state\n    this.state.keyTermsPresent = keyTermsPresent;\n    this.state.keyPhrasesPresent = keyPhrasesPresent;\n  }\n\n  // Check for individual topic or phrase key term\n  checkForParameter(keyTerm) {\n    // keep track of the number of parameters present\n    let parametersCount = 0;\n    // Convert the whole essay to lowercase words, to ease the search for each term\n    let essayLowerCaps = this.state.essayText.toLowerCase();\n    // Make a copy of the essay text to be used for checking different parameters(the ones containinh symbols or spaces)\n    let essay = essayLowerCaps;\n    // Remove all symbols with white spaces\n    essay = essay.replace(/[^a-zA-Z0-9 ]/g, \"\");\n    // Remove multiple spaces with single space to lead to correct word count\n    essay = essay.replace(/[ ]{2,}/g, \" \");\n\n    // Initiate an empty pattern to be replaced by the word looked for\n    let wordPattern = \"\";\n    // Check if the parameters have been added by the lecturer, and if he essay contains them\n    if (keyTerm != \"\") {\n      keyTerm = keyTerm.toLowerCase();\n      // Check if the topic term contains more than one word, as well as special characters such as - or .\n      if (keyTerm.match(/^[a-zA-Z]*$/) == null) {\n        // If the lectures input containe more than one words, check to find it in the initial text before formating\n        if (essayLowerCaps.includes(keyTerm)) {\n          parametersCount += 1;\n        }\n      } else {\n        // create a pattern for the lecturers input to be found inside the text\n        wordPattern = new RegExp(\"( |^)\" + keyTerm + \"( |$)\");\n        // Check if the parameter is present in the essay, and record in the state if it is\n        if (essay.match(wordPattern) != null) {\n          parametersCount += 1;\n        }\n      }\n    }\n\n    // Return the parameter count\n    return parametersCount;\n  }\n\n  // Count the number of prepositions\n  countPrepositions() {\n    // Set the essay to lowercase to avoid errors during the search for prepositions\n    let essay = this.state.essayText.toLowerCase();\n\n    // Store all the prepositions inside an array\n    const prepositions = [\n      \"About\",\n      \"After\",\n      \"Ago\",\n      \"Around\",\n      \"At\",\n      \"Before\",\n      \"By\",\n      \"Circa\",\n      \"During\",\n      \"Following\",\n      \"For\",\n      \"From\",\n      \"Gone\",\n      \"In\",\n      \"On\",\n      \"Past\",\n      \"Prior to\",\n      \"Since\",\n      \"Until\",\n      \"till\",\n      \"Up to\",\n      \"Up until\",\n      \"Aboard\",\n      \"Above\",\n      \"Across\",\n      \"Against\",\n      \"Alongside\",\n      \"Amid\",\n      \"Among\",\n      \"Apart from\",\n      \"Astride\",\n      \"At\",\n      \"Atop\",\n      \"Behind\",\n      \"Below\",\n      \"Beneath\",\n      \"Beside\",\n      \"Between\",\n      \"Beyond\",\n      \"By\",\n      \"Close to\",\n      \"Far\",\n      \"Far from\",\n      \"Forward of\",\n      \"From\",\n      \"In\",\n      \"In between\",\n      \"In front of\",\n      \"Inside\",\n      \"Into\",\n      \"Minus\",\n      \"Near\",\n      \"Near to\",\n      \"Next to\",\n      \"Of\",\n      \"Off\",\n      \"On\",\n      \"On board\",\n      \"On top of\",\n      \"Onto\",\n      \"Upon\",\n      \"Opposite\",\n      \"Out\",\n      \"Out of\",\n      \"Outside\",\n      \"Outside of\",\n      \"Over\",\n      \"Round\",\n      \"Through\",\n      \"Throughout\",\n      \"To\",\n      \"Together with\",\n      \"Toward\",\n      \"towards\",\n      \"Under\",\n      \"Underneath\",\n      \"Up against\",\n      \"With\",\n      \"Within\",\n      \"Without\",\n      \"Above\",\n      \"Across\",\n      \"Against\",\n      \"Ahead\",\n      \"Along\",\n      \"Along with\",\n      \"Amid\",\n      \"Around\",\n      \"Away\",\n      \"Away from\",\n      \"Behind\",\n      \"Below\",\n      \"Beneath\",\n      \"By means of\",\n      \"Down\",\n      \"Further to\",\n      \"In between\",\n      \"Into\",\n      \"Off\",\n      \"Off of\",\n      \"On\",\n      \"Onto\",\n      \"Over\",\n      \"Out of\",\n      \"Past\",\n      \"Round\",\n      \"Through\",\n      \"Toward/towards\",\n      \"Under\",\n      \"Up\",\n      \"Via\",\n      \"About\",\n      \"According to\",\n      \"Anti\",\n      \"As\",\n      \"As for\",\n      \"As per\",\n      \"As to\",\n      \"As well as\",\n      \"Aside from\",\n      \"Bar\",\n      \"Barring\",\n      \"Because of\",\n      \"Besides\",\n      \"But for\",\n      \"By\",\n      \"But\",\n      \"Concerning\",\n      \"Considering\",\n      \"Contrary to\",\n      \"Counting\",\n      \"Cum\",\n      \"Depending on\",\n      \"Despite\",\n      \"Due to\",\n      \"Except\",\n      \"Except for\",\n      \"Excepting\",\n      \"Excluding\",\n      \"Given\",\n      \"In addition to\",\n      \"in case of\",\n      \"In face of\",\n      \"In favor of\",\n      \"in favour of\",\n      \"In light of\",\n      \"In spite of\",\n      \"In view of\",\n      \"Including\",\n      \"Instead of\",\n      \"Less\",\n      \"Like\",\n      \"Notwithstanding\",\n      \"Of\",\n      \"On account of\",\n      \"On behalf of\",\n      \"Other than\",\n      \"Owing to\",\n      \"Pending\",\n      \"Per\",\n      \"Plus\",\n      \"Preparatory to\",\n      \"Pro\",\n      \"Re\",\n      \"Regarding\",\n      \"Regardless of\",\n      \"Save\",\n      \"Save for\",\n      \"Saving\",\n      \"Than\",\n      \"Thanks to\",\n      \"Unlike\",\n      \"Versus\",\n      \"With\",\n      \"With reference to\",\n      \"With regard to\",\n      \"Worth\",\n    ];\n    // Store all prepositions containing multiple words in an array\n    const multiWordsPrepositions = [\n      \"Prior to\",\n      \"Up to\",\n      \"Up until\",\n      \"Apart from\",\n      \"Close to\",\n      \"Far from\",\n      \"Forward of\",\n      \"In between\",\n      \"In front of\",\n      \"Near to\",\n      \"Next to\",\n      \"On board\",\n      \"On top of\",\n      \"Out of\",\n      \"Outside of\",\n      \"Together with\",\n      \"Up against\",\n      \"Along with\",\n      \"Away from\",\n      \"By means of\",\n      \"Further to\",\n      \"In between\",\n      \"Off of\",\n      \"Out of\",\n      \"According to\",\n      \"As for\",\n      \"As per\",\n      \"As to\",\n      \"As well as\",\n      \"Aside from\",\n      \"Because of\",\n      \"But for\",\n      \"Contrary to\",\n      \"Depending on\",\n      \"Due to\",\n      \"Except for\",\n      \"In addition to\",\n      \"in case of\",\n      \"In face of\",\n      \"In favor of\",\n      \"in favour of\",\n      \"In light of\",\n      \"In spite of\",\n      \"In view of\",\n      \"Instead of\",\n      \"On account of\",\n      \"On behalf of\",\n      \"Other than\",\n      \"Owing to\",\n      \"Preparatory to\",\n      \"Regardless of\",\n      \"Save for\",\n      \"Thanks to\",\n      \"With reference to\",\n      \"With regard to\",\n    ];\n\n    // Store all the one word prepositions in an arrray\n    const singleWordPrepositions = [\n      \"About\",\n      \"After\",\n      \"Ago\",\n      \"Around\",\n      \"At\",\n      \"Before\",\n      \"By\",\n      \"Circa\",\n      \"During\",\n      \"Following\",\n      \"For\",\n      \"From\",\n      \"Gone\",\n      \"In\",\n      \"On\",\n      \"Past\",\n      \"Since\",\n      \"Until\",\n      \"till\",\n      \"Aboard\",\n      \"Above\",\n      \"Across\",\n      \"Against\",\n      \"Alongside\",\n      \"Amid\",\n      \"Among\",\n      \"Astride\",\n      \"Atop\",\n      \"Below\",\n      \"Beneath\",\n      \"Beside\",\n      \"Between\",\n      \"Beyond\",\n      \"Far\",\n      \"Inside\",\n      \"Minus\",\n      \"Near\",\n      \"Upon\",\n      \"Opposite\",\n      \"Out\",\n      \"Outside\",\n      \"Over\",\n      \"Through\",\n      \"Throughout\",\n      \"To\",\n      \"Toward\",\n      \"towards\",\n      \"Underneath\",\n      \"With\",\n      \"Within\",\n      \"Without\",\n      \"Ahead\",\n      \"Along\",\n      \"Away\",\n      \"Behind\",\n      \"Down\",\n      \"Into\",\n      \"Off\",\n      \"Onto\",\n      \"Round\",\n      \"Under\",\n      \"Up\",\n      \"Via\",\n      \"Anti\",\n      \"As\",\n      \"Bar\",\n      \"Barring\",\n      \"Besides\",\n      \"But\",\n      \"Concerning\",\n      \"Considering\",\n      \"Counting\",\n      \"Cum\",\n      \"Despite\",\n      \"Except\",\n      \"Excepting\",\n      \"Excluding\",\n      \"Given\",\n      \"Including\",\n      \"Less\",\n      \"Like\",\n      \"Notwithstanding\",\n      \"Of\",\n      \"Pending\",\n      \"Per\",\n      \"Plus\",\n      \"Pro\",\n      \"Re\",\n      \"Regarding\",\n      \"Save\",\n      \"Saving\",\n      \"Than\",\n      \"Unlike\",\n      \"Versus\",\n      \"Worth\",\n    ];\n\n    let pattern = \"\";\n    let prepositionsPresent = [];\n\n    // Loop through the array of prepositions cotaining more than one word and check whether they are present inside the essay\n    multiWordsPrepositions.forEach((preposition) => {\n      // Create a pattern for each preposition to be used for searching the essay\n      pattern = new RegExp(preposition.toLowerCase(), \"g\");\n\n      // Check if the preposition is present, and how many times, then add it to the total count of prepositions\n      if (essay.match(pattern) != null) {\n        this.state.prepositionsCount += essay.match(pattern).length;\n        prepositionsPresent.push(preposition);\n      }\n    });\n\n    // Remove the multi word prepositions from the essay in order to accurately count the single word prepositions\n    prepositionsPresent.forEach((preposition) => {\n      essay = essay.replaceAll(preposition.toLowerCase(), \"\");\n    });\n\n    // Loop through all the prepositions formed of 1 word and check whether they are present in the essay\n    singleWordPrepositions.forEach((preposition) => {\n      // Create a pattern for each prepositon to be looked for inside the essay\n      let prepositionPattern = new RegExp(\n        \"( |^)\" + preposition.toLowerCase() + \"( |$)\"\n      );\n      if (essay.match(prepositionPattern)) {\n        this.state.prepositionsCount += 1;\n      }\n    });\n  }\n\n  // Count the number of paragraphs\n  countParagraphs() {\n    this.state.paragraphsCount = this.state.essayText.split(/\\n/).length;\n  }\n\n  // Render the user inteface with the necessary elements\n  render() {\n    // const { modalVisible } = this.state.modalVisible;\n    const { modalVisible } = this.state;\n\n    return (\n      <View style={styles.body}>\n        {/* modal alert */}\n        {this.state.modalVisible ? (\n          <Modal\n            animationType=\"slide\"\n            transparent={true}\n            visible={modalVisible}\n            onRequestClose={() => {\n              this.setModalVisible(!modalVisible);\n            }}\n          >\n            <View style={styles.modalContainer}>\n              <View style={styles.modalView}>\n                <Text style={styles.modalText}>{this.state.errorMessage} </Text>\n                <Button\n                  title={\"OK\"}\n                  onPress={() => this.setModalVisible(!modalVisible)}\n                />\n\n                {/* <> */}\n                {/* </Button> */}\n              </View>\n            </View>\n            {/* </View> */}\n          </Modal>\n        ) : null}\n\n        <Text style={styles.title}>AUTOMATED ESSAY MARKING SYSTEM</Text>\n        <View style={styles.container}>\n          <View style={styles.row}>\n            <Text style={styles.subtitle}>INSERT ESSAY</Text>\n          </View>\n\n          <View style={styles.row}>\n            <TextInput\n              style={styles.input}\n              multiline={true}\n              onChangeText={(essayText) => this.setState({ essayText })}\n              value={this.state.essayText}\n              maxLength={10000}\n            />\n          </View>\n\n          <View style={styles.row}>\n            <Text style={styles.subtitle}>INSERT TOPIC RELATED WORDS</Text>\n          </View>\n          <View style={styles.row}>\n            <View>\n              <Text style={styles.label}>Key term 1:</Text>\n              <TextInput\n                style={styles.lecturerInput}\n                onChangeText={(lecturerInput1) =>\n                  this.setState({ lecturerInput1 })\n                }\n                value={this.state.lecturerInput1}\n              ></TextInput>\n            </View>\n            <View>\n              <Text style={styles.label}>Key term 2:</Text>\n              <TextInput\n                style={styles.lecturerInput}\n                onChangeText={(lecturerInput2) =>\n                  this.setState({ lecturerInput2 })\n                }\n                value={this.state.lecturerInput2}\n              ></TextInput>\n            </View>\n            <View>\n              <Text style={styles.label}>Key term 3:</Text>\n              <TextInput\n                style={styles.lecturerInput}\n                onChangeText={(lecturerInput3) =>\n                  this.setState({ lecturerInput3 })\n                }\n                value={this.state.lecturerInput3}\n              ></TextInput>\n            </View>\n            <View>\n              <Text style={styles.label}>Key term 4:</Text>\n              <TextInput\n                style={styles.lecturerInput}\n                onChangeText={(lecturerInput4) =>\n                  this.setState({ lecturerInput4 })\n                }\n                value={this.state.lecturerInput4}\n              ></TextInput>\n            </View>\n            <View>\n              <Text style={styles.label}>Key term 5:</Text>\n              <TextInput\n                style={styles.lecturerInput}\n                onChangeText={(lecturerInput5) =>\n                  this.setState({ lecturerInput5 })\n                }\n                value={this.state.lecturerInput5}\n              ></TextInput>\n            </View>\n          </View>\n\n          <View style={styles.row}>\n            <Text style={styles.subtitle}>INSERT TOPIC RELATED PHRASES</Text>\n          </View>\n          <View style={styles.row}>\n            <View>\n              <Text style={styles.label}>Key phrase 1:</Text>\n              <TextInput\n                style={styles.lecturerInput}\n                onChangeText={(lecturerInputPhrase1) =>\n                  this.setState({ lecturerInputPhrase1 })\n                }\n                value={this.state.lecturerInputPhrase1}\n              ></TextInput>\n            </View>\n            <View>\n              <Text style={styles.label}>Key phrase 2:</Text>\n              <TextInput\n                style={styles.lecturerInput}\n                onChangeText={(lecturerInputPhrase2) =>\n                  this.setState({ lecturerInputPhrase2 })\n                }\n                value={this.state.lecturerInputPhrase2}\n              ></TextInput>\n            </View>\n            <View>\n              <Text style={styles.label}>Key phrase 3:</Text>\n              <TextInput\n                style={styles.lecturerInput}\n                onChangeText={(lecturerInputPhrase3) =>\n                  this.setState({ lecturerInputPhrase3 })\n                }\n                value={this.state.lecturerInputPhrase3}\n              ></TextInput>\n            </View>\n            <View>\n              <Text style={styles.label}>Key phrase 4:</Text>\n              <TextInput\n                style={styles.lecturerInput}\n                onChangeText={(lecturerInputPhrase4) =>\n                  this.setState({ lecturerInputPhrase4 })\n                }\n                value={this.state.lecturerInputPhrase4}\n              ></TextInput>\n            </View>\n            <View>\n              <Text style={styles.label}>Key phrase 5:</Text>\n              <TextInput\n                style={styles.lecturerInput}\n                onChangeText={(lecturerInputPhrase5) =>\n                  this.setState({ lecturerInputPhrase5 })\n                }\n                value={this.state.lecturerInputPhrase5}\n              ></TextInput>\n            </View>\n          </View>\n\n          <View style={styles.row}>\n            <Text style={styles.subtitle}>\n              INSERT EXPECTED WORD COUNT RANGE\n            </Text>\n          </View>\n          <View style={styles.rowStart}>\n            <View>\n              <Text style={styles.label}>Min:</Text>\n              <TextInput\n                style={styles.lecturerInput}\n                onChangeText={(minNumberWords) =>\n                  this.setState({ minNumberWords })\n                }\n                value={this.state.minNumberWords}\n                keyboardType=\"numeric\"\n                maxLength={5}\n              ></TextInput>\n            </View>\n            <View>\n              <Text style={styles.label}>Max:</Text>\n              <TextInput\n                style={styles.lecturerInput}\n                onChangeText={(maxNumberWords) =>\n                  this.setState({ maxNumberWords })\n                }\n                value={this.state.maxNumberWords}\n                keyboardType=\"numeric\"\n                maxLength={5}\n              ></TextInput>\n            </View>\n          </View>\n\n          <View style={styles.rowEnd}>\n            <TouchableOpacity\n              style={styles.primaryButton}\n              onPress={() => this.processText()}\n            >\n              <Text style={styles.buttonText}>{\"SUBMIT\"}</Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n      </View>\n    );\n  }\n}\n\nexport default HomeScreen;\n\nconst styles = StyleSheet.create({\n  body: {\n    backgroundColor: \"#F5F5F5\",\n    minHeight: \"100%\",\n  },\n  input: {\n    height: 500,\n    fontSize: 16,\n    padding: 10,\n    backgroundColor: \"#ffffff\",\n    width: \"100%\",\n    borderWidth: 3,\n    borderColor: \"#ABABAB\",\n    boxShadow: \"0px 4px 4px rgba(0, 0, 0, 0.25)\",\n    color: \"#444444\",\n    lineHeight: 25,\n  },\n  container: {\n    flex: 1,\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    marginTop: 10,\n    maxWidth: 1100,\n    width: \"100%\",\n    margin: \"auto\",\n    marginBottom: 50,\n    backgroundColor: \"#F1F1F1\",\n    paddingLeft: 40,\n    paddingRight: 40,\n    paddingBottom: 20,\n    boxShadow: \"0px 4px 10px rgba(0, 0, 0, 0.25)\",\n  },\n  row: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    width: \"100%\",\n    flexWrap: \"wrap\",\n    gap: 8,\n  },\n  rowEnd: {\n    flexDirection: \"row\",\n    justifyContent: \"end\",\n    width: \"100%\",\n  },\n  rowStart: {\n    flexDirection: \"row\",\n    width: \"100%\",\n    flexWrap: \"wrap\",\n    gap: 25,\n    marginBottom: 25,\n  },\n  rowVertical: {\n    flexDirection: \"columns\",\n    justifyContent: \"space-between\",\n    marginTop: 40,\n    backgroundColor: \"#E9E9E9\",\n  },\n  lecturerInput: {\n    backgroundColor: \"#ffffff\",\n    padding: 7,\n    marginBottom: 10,\n    borderWidth: 2,\n    borderColor: \"#ABABAB\",\n    color: \"#444444\",\n  },\n  title: {\n    backgroundColor: \"#E9E9E9\",\n    fontSize: 30,\n    width: \"100%\",\n    textAlign: \"center\",\n    padding: 40,\n    fontStyle: \"normal\",\n    fontWeight: 600,\n    fontSize: 40,\n    lineHeight: 47,\n    letterSpacing: \"0.325em\",\n    color: \"#2EA7EB\",\n    boxShadow: \"0px 10px 5px rgba(0, 0, 0, 0.25)\",\n    marginBottom: 20,\n  },\n  primaryButton: {\n    textAlign: \"center\",\n    minWidth: 169,\n    padding: 8,\n    backgroundColor: \"#FFFFFF\",\n    borderWidth: 2.5,\n    borderColor: \"#2EA7EB\",\n  },\n\n  buttonText: {\n    color: \"#2EA7EB\",\n    fontSize: \"14\",\n    letterSpacing: 1.25,\n  },\n  subtitle: {\n    fontStyle: \"normal\",\n    fontWeight: 400,\n    fontSize: 20,\n    lineHeight: 18,\n    letterSpacing: \"0.16em\",\n    marginTop: 30,\n    marginBottom: 10,\n    color: \"#2EA7EB\",\n  },\n  label: {\n    fontStyle: \"normal\",\n    fontWeight: 400,\n    lineHeight: 18,\n    marginBottom: 2,\n    color: \"#444444\",\n  },\n\n  // Modal alert box settings\n  centeredView: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginTop: 22,\n  },\n  modalView: {\n    margin: 20,\n    backgroundColor: \"white\",\n    borderRadius: 20,\n    padding: 35,\n    alignItems: \"center\",\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5,\n  },\n  button: {\n    borderRadius: 20,\n    padding: 10,\n    elevation: 2,\n  },\n  buttonOpen: {\n    backgroundColor: \"#F194FF\",\n  },\n  buttonClose: {\n    backgroundColor: \"#2196F3\",\n  },\n  textStyle: {\n    color: \"white\",\n    fontWeight: \"bold\",\n    textAlign: \"center\",\n  },\n  modalText: {\n    marginBottom: 15,\n    textAlign: \"center\",\n  },\n  modalContainer: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    margintop: \"10\",\n  },\n  modalView: {\n    margin: \"20\",\n    backgroundColor: \"red\",\n    padding: \"140\",\n    alignItems: \"center\",\n    border: \"2\",\n  },\n});\n"]},"metadata":{},"sourceType":"module"}