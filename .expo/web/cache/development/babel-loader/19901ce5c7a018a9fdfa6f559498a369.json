{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport React, { Component } from \"react\";\nimport { readDictionaryAsync } from \"spell-checker-js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar App = function (_Component) {\n  _inherits(App, _Component);\n\n  var _super = _createSuper(App);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      essayText: \"\",\n      isLoading: false,\n      essayWordCount: \"\",\n      essaySentenceCount: \"\",\n      averageSentenceLength: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"processText\",\n    value: function processText() {\n      console.log(\"text\", this.state.essayText);\n      var essayExample = \"In this essay we will  discuss the... Notion that virtue is knowledge. We will do this by following Plato's own route into the discussion - a refutation of Meno's misconception of knowledge. The argument Plato provides to this end gives us crucial contextual information and allows us to see how Plato derives his doctrine that virtue is knowledge. We will look at the terms Plato uses to define virtuous and non-virtuous actions and analyse the connotations these held for him. I will then provide an exposition of the traditional formulation of the platonic 'moral paradox' before arguing that this paradox only exists if one misinterprets Plato's own text. 1. Desire for the good Plato's Meno focuses on the issue of virtue - its nature and its properties. During the dialogue several definitions of virtue are discussed. However, the definition that seems to be settled upon entails the doctrine that virtue is knowledge. This definition is proposed as a response to Meno's suggestion that virtue is a term encompassing two elements: firstly that virtue is the desire for good things and secondly that it is the ability to obtain good things. By way of answer, Socrates suggests that, in fact, everyone desires the good. As virtue is not present in all men, virtue cannot be the desire for good things. Socrates' argument for it.\";\n      essayExample = \"Hi. I'm andrei.\";\n      var essay = essayExample;\n      this.state.essayWordCount = this.countWords(essay);\n      this.state.essaySentenceCount = this.countSentences(essay);\n      this.state.averageSentenceLength = this.state.essayWordCount / this.state.essaySentenceCount;\n      console.log(\"essayWordCount: \", this.state.essayWordCount);\n      console.log(\"essaySentenceCount: \", this.state.essaySentenceCount);\n      console.log(\"averageSentenceLength: \", this.state.averageSentenceLength);\n    }\n  }, {\n    key: \"countWords\",\n    value: function countWords(essay) {\n      essay = essay.replace(/[^a-zA-Z0-9 ]/g, \"\");\n      essay = essay.replace(/[ ]{2,}/g, \" \");\n      var totalWordCount = essay.split(\" \").length;\n      return totalWordCount;\n    }\n  }, {\n    key: \"countSentences\",\n    value: function countSentences(essay) {\n      return essay.match(/\\w[.!?]\\s*\\$*/g).length;\n    }\n  }, {\n    key: \"checkSpelling\",\n    value: function checkSpelling(essay) {\n      var Typo = require(\"typo-js\");\n\n      var dictionary = new Typo();\n      var is_spelled_correctly = dictionary.check(\"mispelled\");\n      console.log(is_spelled_correctly);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      if (this.state.isLoading) {\n        return _jsx(View, {\n          children: _jsx(Text, {\n            children: \"Loading..\"\n          })\n        });\n      } else {\n        return _jsxs(View, {\n          style: styles.container,\n          children: [_jsx(View, {\n            style: styles.row,\n            children: _jsx(TextInput, {\n              style: styles.input,\n              multiline: true,\n              placeholder: \"Insert text\",\n              onChangeText: function onChangeText(essayText) {\n                return _this2.setState({\n                  essayText: essayText\n                });\n              },\n              value: this.state.essayText\n            })\n          }), _jsxs(View, {\n            style: styles.row,\n            children: [_jsx(Button, {\n              title: \"UPLOAD FILE\",\n              onPress: function onPress() {\n                return _this2.processText();\n              }\n            }), _jsx(Button, {\n              title: \"ESSAY TYPE\",\n              onPress: function onPress() {\n                return _this2.processText();\n              }\n            }), _jsx(Button, {\n              title: \"SUBMIT\",\n              onPress: function onPress() {\n                return _this2.processText();\n              }\n            })]\n          }), _jsx(Text, {\n            children: \"For lecturer, ad terms that should be present in the essay depending on the topic\"\n          }), _jsxs(View, {\n            style: styles.rowVertical,\n            children: [_jsx(TextInput, {\n              style: styles.lecturerInput,\n              placeholder: \"add relevant word\"\n            }), _jsx(TextInput, {\n              style: styles.lecturerInput\n            }), _jsx(TextInput, {\n              style: styles.lecturerInput\n            }), _jsx(TextInput, {\n              style: styles.lecturerInput\n            }), _jsx(TextInput, {\n              style: styles.lecturerInput\n            })]\n          })]\n        });\n      }\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;\nvar styles = StyleSheet.create({\n  input: {\n    height: 300,\n    fontSize: 16,\n    padding: 10,\n    backgroundColor: \"#ffffff\",\n    width: \"100%\",\n    borderRadius: 10,\n    borderColor: \"black\"\n  },\n  container: {\n    backgroundColor: \"#2EA7EB\",\n    flex: 1,\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    padding: 20\n  },\n  row: {\n    flexDirection: \"row\",\n    minWidth: 600,\n    justifyContent: \"space-between\",\n    marginTop: 40\n  },\n  rowVertical: {\n    flexDirection: \"columns\",\n    minWidth: 600,\n    justifyContent: \"space-between\",\n    marginTop: 40,\n    backgroundColor: \"red\"\n  },\n  lecturerInput: {\n    backgroundColor: \"#ffffff\",\n    padding: 10,\n    borderWidth: 2,\n    borderColor: \"#000000\"\n  }\n});","map":{"version":3,"sources":["/Users/andreifrandes/AutomatedEssayGradingSystem/App.js"],"names":["React","Component","readDictionaryAsync","App","props","state","essayText","isLoading","essayWordCount","essaySentenceCount","averageSentenceLength","console","log","essayExample","essay","countWords","countSentences","replace","totalWordCount","split","length","match","Typo","require","dictionary","is_spelled_correctly","check","styles","container","row","input","setState","processText","rowVertical","lecturerInput","StyleSheet","create","height","fontSize","padding","backgroundColor","width","borderRadius","borderColor","flex","flexDirection","alignItems","minWidth","justifyContent","marginTop","borderWidth"],"mappings":"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","sourcesContent":["import { StyleSheet, Text, View, TextInput, Button } from \"react-native\";\nimport React, { Component } from \"react\";\nimport { readDictionaryAsync } from \"spell-checker-js\";\n// Set isLoading to true later\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      essayText: \"\",\n      isLoading: false, // set to true later\n      essayWordCount: \"\",\n      essaySentenceCount: \"\",\n      averageSentenceLength: \"\",\n    };\n  }\n\n  // main function\n  processText() {\n    console.log(\"text\", this.state.essayText);\n    let essayExample =\n      \"In this essay we will  discuss the... Notion that virtue is knowledge. We will do this by following Plato's own route into the discussion - a refutation of Meno's misconception of knowledge. The argument Plato provides to this end gives us crucial contextual information and allows us to see how Plato derives his doctrine that virtue is knowledge. We will look at the terms Plato uses to define virtuous and non-virtuous actions and analyse the connotations these held for him. I will then provide an exposition of the traditional formulation of the platonic 'moral paradox' before arguing that this paradox only exists if one misinterprets Plato's own text. 1. Desire for the good Plato's Meno focuses on the issue of virtue - its nature and its properties. During the dialogue several definitions of virtue are discussed. However, the definition that seems to be settled upon entails the doctrine that virtue is knowledge. This definition is proposed as a response to Meno's suggestion that virtue is a term encompassing two elements: firstly that virtue is the desire for good things and secondly that it is the ability to obtain good things. By way of answer, Socrates suggests that, in fact, everyone desires the good. As virtue is not present in all men, virtue cannot be the desire for good things. Socrates' argument for it.\";\n    // Store the essay from the state inside a variable\n    // const essay = this.state.essayText; // replace\n    essayExample = \"Hi. I'm andrei.\";\n    const essay = essayExample; // change\n\n    // Count the number of words for the whole essay\n    this.state.essayWordCount = this.countWords(essay);\n\n    // Count the number of sentences for the whole essay\n    this.state.essaySentenceCount = this.countSentences(essay);\n\n    // Calculate the average number of words per sentence\n    // Save the data inside the state to be used during the check\n    this.state.averageSentenceLength =\n      this.state.essayWordCount / this.state.essaySentenceCount;\n\n    console.log(\"essayWordCount: \", this.state.essayWordCount);\n    console.log(\"essaySentenceCount: \", this.state.essaySentenceCount);\n    console.log(\"averageSentenceLength: \", this.state.averageSentenceLength);\n  }\n\n  // Counts the words only NOT symbols\n  countWords(essay) {\n    // Replace all the characters with an empty space before preceding to counting the total number of words\n    essay = essay.replace(/[^a-zA-Z0-9 ]/g, \"\");\n    // Remove multiple spaces with single space to lead to correct word count\n    essay = essay.replace(/[ ]{2,}/g, \" \");\n    // Count all the words\n    const totalWordCount = essay.split(\" \").length;\n    return totalWordCount;\n  }\n\n  countSentences(essay) {\n    // Check the words followed by . or ! or ?, and followed by a whitespace, which signify then end on a sentence\n    return essay.match(/\\w[.!?]\\s*\\$*/g).length;\n  }\n\n  // Not working\n  checkSpelling(essay) {\n    const Typo = require(\"typo-js\");\n    const dictionary = new Typo();\n\n    // Check if it is working\n    let is_spelled_correctly = dictionary.check(\"mispelled\");\n    console.log(is_spelled_correctly);\n  }\n\n  render() {\n    if (this.state.isLoading) {\n      return (\n        <View>\n          <Text>Loading..</Text>\n        </View>\n      );\n    }\n    // Display if the the page is ready\n    else {\n      return (\n        <View style={styles.container}>\n          <View style={styles.row}>\n            <TextInput\n              style={styles.input}\n              multiline={true}\n              placeholder=\"Insert text\"\n              onChangeText={(essayText) => this.setState({ essayText })}\n              value={this.state.essayText}\n            />\n          </View>\n          <View style={styles.row}>\n            <Button title=\"UPLOAD FILE\" onPress={() => this.processText()} />\n            <Button title=\"ESSAY TYPE\" onPress={() => this.processText()} />\n            <Button title=\"SUBMIT\" onPress={() => this.processText()} />\n          </View>\n\n          <Text>\n            For lecturer, ad terms that should be present in the essay depending\n            on the topic\n          </Text>\n          <View style={styles.rowVertical}>\n            <TextInput\n              style={styles.lecturerInput}\n              placeholder=\"add relevant word\"\n            ></TextInput>\n            <TextInput style={styles.lecturerInput}></TextInput>\n            <TextInput style={styles.lecturerInput}></TextInput>\n            <TextInput style={styles.lecturerInput}></TextInput>\n            <TextInput style={styles.lecturerInput}></TextInput>\n          </View>\n        </View>\n      );\n    }\n  }\n}\n\nexport default App;\n\nconst styles = StyleSheet.create({\n  input: {\n    height: 300,\n    fontSize: 16, // CHANGE\n    padding: 10,\n    backgroundColor: \"#ffffff\",\n    width: \"100%\",\n    borderRadius: 10,\n    borderColor: \"black\",\n  },\n  container: {\n    backgroundColor: \"#2EA7EB\",\n    flex: 1,\n    flexDirection: \"column\",\n    alignItems: \"center\", // keep content in the middle\n    padding: 20,\n  },\n  row: {\n    flexDirection: \"row\",\n    minWidth: 600,\n    justifyContent: \"space-between\",\n    marginTop: 40,\n  },\n  rowVertical: {\n    flexDirection: \"columns\",\n    minWidth: 600,\n    justifyContent: \"space-between\",\n    marginTop: 40,\n    backgroundColor: \"red\",\n  },\n  lecturerInput: {\n    backgroundColor: \"#ffffff\",\n    padding: 10,\n\n    borderWidth: 2,\n    borderColor: \"#000000\",\n  },\n});\n"]},"metadata":{},"sourceType":"module"}