{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport React, { Component } from \"react\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar HomeScreen = function (_Component) {\n  _inherits(HomeScreen, _Component);\n\n  var _super = _createSuper(HomeScreen);\n\n  function HomeScreen(props) {\n    var _this;\n\n    _classCallCheck(this, HomeScreen);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      essayText: \"\",\n      isLoading: false,\n      essayWordCount: \"\",\n      essaySentenceCount: \"\",\n      averageSentenceLength: \"\",\n      averageWordLengthCount: \"\",\n      paragraphsCount: \"\",\n      lecturerInput1: \"\",\n      lecturerInput2: \"\",\n      lecturerInput3: \"\",\n      lecturerInput4: \"\",\n      lecturerInput5: \"\",\n      lecturerInputPhrase1: \"\",\n      lecturerInputPhrase2: \"\",\n      lecturerInputPhrase3: \"\",\n      lecturerInputPhrase4: \"\",\n      lecturerInputPhrase5: \"\",\n      parametersPresentCount: 0,\n      spellingMistakesCount: 0,\n      minNumberWords: \"\",\n      maxNumberWords: \"\",\n      prepositionsCount: 0,\n      referencesCount: 0,\n      punctuationErrorCount: 0,\n      uniqueWordsPercentage: 0\n    };\n    return _this;\n  }\n\n  _createClass(HomeScreen, [{\n    key: \"processText\",\n    value: function processText() {\n      var essayExample = \"In this essay we will  discuss the... Notion that virtue is knowledge. We will do this by following Plato's own route into the discussion - a refutation of Meno's misconception of knowledge. The argument Plato provides to this end gives us crucial contextual information and allows us to see how Plato derives his doctrine that virtue is knowledge. We will look at the terms Plato uses to define virtuous and non-virtuous actions and analyse the connotations these held for him. I will then provide an exposition of the traditional formulation of the platonic 'moral paradox' before arguing that this paradox only exists if one misinterprets Plato's own text. 1. Desire for the good Plato's Meno focuses on the issue of virtue - its nature and its properties. During the dialogue several definitions of virtue are discussed. However, the definition that seems to be settled upon entails the doctrine that virtue is knowledge. This definition is proposed as a response to Meno's suggestion that virtue is a term encompassing two elements: firstly that virtue is the desire for good things and secondly that it is the ability to obtain good things. By way of answer, Socrates suggests that, in fact, everyone desires the good. As virtue is not present in all men, virtue cannot be the desire for good things. Socrates' argument for it.\";\n      var essay = essayExample;\n      this.countWords();\n      this.averageWordLength();\n      this.countSentences();\n      this.checkForLecturersParameters();\n      this.countParagraphs();\n      this.countPrepositions();\n      this.checkWordFrequency();\n      this.checkSpelling();\n      this.checkPunctuation();\n      this.checkSpelling();\n      this.countReferences();\n      this.countPunctuationMistakes();\n      this.calculateaAverageSentenceLength();\n      this.percentageUniqueWords();\n      this.checkUniqueWordsPercentage();\n      this.calculateFinalGrade();\n      var results = {\n        essayWordCount: this.state.essayWordCount,\n        sentenceCount: this.state.sentenceCount,\n        paragraphsCount: this.state.paragraphsCount,\n        prepositionsCount: this.state.prepositionsCount,\n        referencesCount: this.state.referencesCount,\n        averageSentenceLength: this.state.averageSentenceLength,\n        averageWordLengthCount: this.state.averageWordLengthCount,\n        percentageUniqueWords: this.state.percentageUniqueWords,\n        keyTermsPresent: this.state.keyTermsPresent,\n        keyPhrasesPresent: this.state.keyPhrasesPresent,\n        spellingMistakesCount: this.state.spellingMistakesCount,\n        punctuationErrorCount: this.state.punctuationErrorCount,\n        uniqueWordsPercentage: this.state.uniqueWordsPercentage\n      };\n      this.props.navigation.navigate(\"Feedback\", {\n        results: results\n      });\n    }\n  }, {\n    key: \"calculateFinalGrade\",\n    value: function calculateFinalGrade() {\n      var weights = {\n        essayWordCount: 0.12,\n        sentenceCount: 0.3,\n        paragraphsCount: 0.12,\n        prepositionCount: 0.4,\n        referencesCount: 0.1,\n        averageSentenceLength: 0.6,\n        averageWordLength: 0.4,\n        percentageUniqueWords: 0.4,\n        keyTermsPresent: 0.15,\n        keyPhrasesPresent: 0.15,\n        punctuationErrorCount: 0.15\n      };\n      var essayLengthRules = 0;\n\n      if (this.state.maxNumberWords <= 800) {\n        essayLengthRules = 500;\n        console.log(\"essayLengthRules: 500\");\n      } else if (this.state.maxNumberWords <= 1400 || this.state.minNumberWords >= 800 && this.state.minNumberWords <= 1000) {\n        essayLengthRules = 1000;\n        console.log(\"essayLengthRules: 1000\");\n      } else if (this.state.maxNumberWords > 1500 && this.state.maxNumberWords < 2000 && this.state.minNumberWords > 1000) {\n        essayLengthRules = 1500;\n        console.log(\"essayLengthRules: 1500\");\n      } else if (this.state.maxNumberWords > 2000) {\n        essayLengthRules = 2000;\n        console.log(\"essayLengthRules: 2000\");\n      } else {\n        essayLengthRules = 500;\n      }\n\n      var grades = {\n        essayWordCount: 0,\n        keyTermsGrade: 0,\n        keyPhrasesGrade: 0\n      };\n\n      if (this.state.essayWordCount <= this.state.maxNumberWords) {\n        console.log(\"max limit of words passed!\");\n      }\n\n      if (this.state.essayWordCount >= this.state.minNumberWords && this.state.essayWordCount <= this.state.maxNumberWords) {\n        grades.essayWordCount = 100;\n        console.log(\"word count : excenelent\");\n      } else if (this.state.essayWordCount >= this.state.minNumberWords * 90 / 100 && this.state.essayWordCount <= this.state.maxNumberWords * 110 / 100) {\n        grades.essayWordCount = 75;\n        console.log(\"word count : accomplishes\");\n      } else if (this.state.essayWordCount >= this.state.minNumberWords * 70 / 100 && this.state.essayWordCount <= this.state.maxNumberWords * 130 / 100) {\n        grades.essayWordCount = 50;\n        console.log(\"word count : capable\");\n      } else if (this.state.essayWordCount < this.state.minNumberWords * 70 / 100 || this.state.essayWordCount > this.state.maxNumberWords * 130 / 100) {\n        grades.essayWordCount = 25;\n        console.log(\"word count : beginner\");\n      }\n\n      console.log(this.state.keyTermsPresent);\n\n      if (this.state.keyTermsPresent == 5) {\n        grades.keyTermsGrade = 100;\n      } else if (this.state.keyTermsPresent == 4) {\n        grades.keyTermsGrade = 75;\n      } else if (this.state.keyTermsPresent >= 2) {\n        grades.keyTermsGrade = 50;\n      } else if (this.state.keyTermsPresent == 1) {\n        grades.keyTermsGrade = 25;\n      } else {\n        grades.keyTermsGrade = 0;\n      }\n\n      console.log(this.state.keyPhrasesPresent);\n\n      if (this.state.keyPhrasesPresent == 5) {\n        grades.keyPhrasesGrade = 100;\n      } else if (this.state.keyPhrasesPresent == 4) {\n        grades.keyPhrasesGrade = 75;\n      } else if (this.state.keyPhrasesPresent >= 2) {\n        grades.keyPhrasesGrade = 50;\n      } else if (this.state.keyPhrasesPresent == 1) {\n        grades.keyPhrasesGrade = 25;\n      } else {\n        grades.keyPhrasesGrade = 0;\n      }\n\n      console.log(this.state.punctuationErrorCount, \": punctuationErrorCount\");\n      console.log(grades);\n    }\n  }, {\n    key: \"calculateaAverageSentenceLength\",\n    value: function calculateaAverageSentenceLength() {\n      this.state.averageSentenceLength = Math.round(this.state.essayWordCount / this.state.essaySentenceCount);\n    }\n  }, {\n    key: \"countPunctuationMistakes\",\n    value: function countPunctuationMistakes() {\n      var _this2 = this;\n\n      var essay = this.state.essayText;\n      var pattern = new RegExp(/[.?!]{2,}/g);\n      var punctuationPotentialErrorsArray = essay.match(pattern);\n      var correctPuntuationArray = [\"?!\", \"...\", \").\", \")?\", \")!\", \")...\", \")?!\", \".(\", \"?(\", \"!(\", \"...(\", \"?!(\", \"].\", \"]...\", \"]?\", \"]!\", \"]?!\", \".[\", \"...[\", \"?[\", \"![\", \"?![\", '\".', '\"?', '\"!', '\"?!', '...\"', '.\"', '?\"', '!\"', '?!\"', '...\"'];\n\n      if (punctuationPotentialErrorsArray != null) {\n        punctuationPotentialErrorsArray.forEach(function (element) {\n          if (!correctPuntuationArray.includes(element)) {\n            console.log(\"error: \", element);\n            _this2.state.punctuationErrorCount += 1;\n          }\n        });\n      }\n    }\n  }, {\n    key: \"countReferences\",\n    value: function countReferences() {\n      var essay = this.state.essayText;\n      var pattern = new RegExp(/\\(\\D+\\d{4}\\)/g);\n      var citations = essay.match(pattern);\n\n      if (citations == null) {\n        this.state.referencesCount = 0;\n      } else {\n        this.state.referencesCount = citations.length;\n      }\n    }\n  }, {\n    key: \"percentageUniqueWords\",\n    value: function percentageUniqueWords() {\n      var essay = this.state.essayText;\n      var wordOccurancesCount = {};\n      essay = essay.replace(/[^a-zA-Z0-9 ]/g, \"\");\n      essay = essay.replace(/[ ]{2,}/g, \" \");\n      essay = essay.toLowerCase();\n      essay = essay.split(\" \");\n      essay.sort();\n\n      for (var _iterator = _createForOfIteratorHelperLoose(essay), _step; !(_step = _iterator()).done;) {\n        var word = _step.value;\n\n        if (wordOccurancesCount[word]) {\n          wordOccurancesCount[word] += 1;\n        } else {\n          wordOccurancesCount[word] = 1;\n        }\n      }\n\n      var uniqueWordsCount = 0;\n\n      for (var wordKey in wordOccurancesCount) {\n        if (wordOccurancesCount[wordKey] == 1) {\n          uniqueWordsCount += 1;\n        }\n      }\n\n      var wordOccurancesCountLength = Object.keys(wordOccurancesCount).length;\n      var percentageUniqueWords = Math.round(uniqueWordsCount / wordOccurancesCountLength * 100);\n      this.state.uniqueWordsPercentage = percentageUniqueWords;\n    }\n  }, {\n    key: \"checkPunctuation1\",\n    value: function checkPunctuation1() {\n      var essay = this.state.essayText;\n      var essaySentences = essay.match(/[^\\.!\\?]+[\\.!\\?]+/g);\n      console.log(\"CHECK PUNCTUATION: \", essaySentences);\n      var validPunctuation = [\".\", \"...\", \"?\", \"?!\", \"!\"];\n    }\n  }, {\n    key: \"checkSpelling\",\n    value: function checkSpelling() {}\n  }, {\n    key: \"countWords\",\n    value: function countWords() {\n      var essay = this.state.essayText;\n      essay = essay.replace(/[^a-zA-Z0-9 ]/g, \"\");\n      essay = essay.replace(/[ ]{2,}/g, \" \");\n      this.state.essayWordCount = essay.split(\" \").length;\n    }\n  }, {\n    key: \"checkUniqueWordsPercentage\",\n    value: function checkUniqueWordsPercentage() {\n      var essay = this.state.essayText;\n      essay = essay.replace(/[^a-zA-Z0-9 ]/g, \"\");\n      essay = essay.replace(/[ ]{2,}/g, \" \");\n      var words = essay.split(\" \");\n      words.sort();\n    }\n  }, {\n    key: \"checkWordFrequency\",\n    value: function checkWordFrequency() {\n      var essay = this.state.essayText;\n      essay = \"In this essay we will  discuss the... Notion that virtue is knowledge. We will do this by following Plato's own route into the discussion - a refutation of Meno's misconception of knowledge. The argument Plato provides to this end gives us crucial contextual information and allows us to see how Plato derives his doctrine that virtue is knowledge. We will look at the terms Plato uses to define virtuous and non-virtuous actions and analyse the connotations these held for him. I will then provide an exposition of the traditional formulation of the platonic 'moral paradox' before arguing that this paradox only exists if one misinterprets Plato's own text. 1. Desire for the good Plato's Meno focuses on the issue of virtue - its nature and its properties. During the dialogue several definitions of virtue are discussed. However, the definition that seems to be settled upon entails the doctrine that virtue is knowledge. This definition is proposed as a response to Meno's suggestion that virtue is a term encompassing two elements: firstly that virtue is the desire for good things and secondly that it is the ability to obtain good things. By way of answer, Socrates suggests that, in fact, everyone desires the good. As virtue is not present in all men, virtue cannot be the desire for good things. Socrates' argument for it.\";\n      essay = essay.replace(/[^a-zA-Z0-9 ]/g, \"\");\n      essay = essay.replace(/[ ]{2,}/g, \" \");\n      essay = essay.split(\" \");\n      var wordFrequencyCounter = {};\n      essay.forEach(function (word) {\n        if (!wordFrequencyCounter[word]) {\n          wordFrequencyCounter[word] = 1;\n        } else {\n          wordFrequencyCounter[word] += 1;\n        }\n      });\n    }\n  }, {\n    key: \"averageWordLength\",\n    value: function averageWordLength() {\n      var essay = this.state.essayText;\n      essay = essay.replace(/[^a-zA-Z0-9 ]/g, \"\");\n      essay = essay.replace(/[ ]{2,}/g, \" \");\n      essay = essay.split(\" \");\n      var totalWordLength = 0;\n      essay.forEach(function (word) {\n        totalWordLength += word.length;\n      });\n      this.state.averageWordLengthCount = Math.round(totalWordLength / this.state.essayWordCount);\n    }\n  }, {\n    key: \"countSentences\",\n    value: function countSentences() {\n      var essay = this.state.essayText;\n      var sentences = essay.match(/\\w[.!?]\\s*\\$*/g);\n\n      if (sentences != null) {\n        this.state.sentenceCount = essay.match(/\\w[.!?]\\s*\\$*/g).length;\n      } else {\n        this.state.sentenceCount = 0;\n      }\n    }\n  }, {\n    key: \"checkPunctuation\",\n    value: function checkPunctuation() {\n      var essay = this.state.essayText;\n      var errorCounter = 0;\n      essay = essay.match(/[^.!?]+[.!?]/g);\n      var sentenceStartPattern = /^ *[A-Z1-9\"\\(]/g;\n      essay.forEach(function (sentence) {\n        if (!sentence.match(sentenceStartPattern)) {\n          errorCounter += 1;\n        }\n      });\n    }\n  }, {\n    key: \"checkForLecturersParameters\",\n    value: function checkForLecturersParameters() {\n      this.state.parametersPresentCount = 0;\n      var lecturerParameteres = [this.state.lecturerInput1, this.state.lecturerInput2, this.state.lecturerInput3, this.state.lecturerInput4, this.state.lecturerInput5];\n      var lecturerParameteresPhrases = [this.state.lecturerInputPhrase1, this.state.lecturerInputPhrase2, this.state.lecturerInputPhrase3, this.state.lecturerInputPhrase4, this.state.lecturerInputPhrase5];\n      var keyTermsPresent = 0;\n      var keyPhrasesPresent = 0;\n\n      for (var i = 0; i < lecturerParameteres.length; i++) {\n        keyTermsPresent += this.checkForParameter(lecturerParameteres[i]);\n      }\n\n      for (var _i = 0; _i < lecturerParameteresPhrases.length; _i++) {\n        keyPhrasesPresent += this.checkForParameter(lecturerParameteresPhrases[_i]);\n      }\n\n      this.state.keyTermsPresent = keyTermsPresent;\n      this.state.keyPhrasesPresent = keyPhrasesPresent;\n    }\n  }, {\n    key: \"checkForParameter\",\n    value: function checkForParameter(keyTerm) {\n      var parametersCount = 0;\n      var essayLowerCaps = this.state.essayText.toLowerCase();\n      var essay = essayLowerCaps;\n      essay = essay.replace(/[^a-zA-Z0-9 ]/g, \"\");\n      essay = essay.replace(/[ ]{2,}/g, \" \");\n      var wordPattern = \"\";\n\n      if (keyTerm != \"\") {\n        keyTerm = keyTerm.toLowerCase();\n\n        if (keyTerm.match(/^[a-zA-Z]*$/) == null) {\n          if (essayLowerCaps.includes(keyTerm)) {\n            console.log(\"PARAMETER PRESENT\");\n            parametersCount += 1;\n          }\n        } else {\n          wordPattern = new RegExp(\"( |^)\" + keyTerm + \"( |$)\");\n\n          if (essay.match(wordPattern) != null) {\n            console.log(\"PARAMETER PRESENT\");\n            parametersCount += 1;\n          }\n        }\n      }\n\n      return parametersCount;\n    }\n  }, {\n    key: \"countPrepositions\",\n    value: function countPrepositions() {\n      var _this3 = this;\n\n      var essay = this.state.essayText.toLowerCase();\n      var prepositions = [\"About\", \"After\", \"Ago\", \"Around\", \"At\", \"Before\", \"By\", \"Circa\", \"During\", \"Following\", \"For\", \"From\", \"Gone\", \"In\", \"On\", \"Past\", \"Prior to\", \"Since\", \"Until\", \"till\", \"Up to\", \"Up until\", \"Aboard\", \"Above\", \"Across\", \"Against\", \"Alongside\", \"Amid\", \"Among\", \"Apart from\", \"Astride\", \"At\", \"Atop\", \"Behind\", \"Below\", \"Beneath\", \"Beside\", \"Between\", \"Beyond\", \"By\", \"Close to\", \"Far\", \"Far from\", \"Forward of\", \"From\", \"In\", \"In between\", \"In front of\", \"Inside\", \"Into\", \"Minus\", \"Near\", \"Near to\", \"Next to\", \"Of\", \"Off\", \"On\", \"On board\", \"On top of\", \"Onto\", \"Upon\", \"Opposite\", \"Out\", \"Out of\", \"Outside\", \"Outside of\", \"Over\", \"Round\", \"Through\", \"Throughout\", \"To\", \"Together with\", \"Toward\", \"towards\", \"Under\", \"Underneath\", \"Up against\", \"With\", \"Within\", \"Without\", \"Above\", \"Across\", \"Against\", \"Ahead\", \"Along\", \"Along with\", \"Amid\", \"Around\", \"Away\", \"Away from\", \"Behind\", \"Below\", \"Beneath\", \"By means of\", \"Down\", \"Further to\", \"In between\", \"Into\", \"Off\", \"Off of\", \"On\", \"Onto\", \"Over\", \"Out of\", \"Past\", \"Round\", \"Through\", \"Toward/towards\", \"Under\", \"Up\", \"Via\", \"About\", \"According to\", \"Anti\", \"As\", \"As for\", \"As per\", \"As to\", \"As well as\", \"Aside from\", \"Bar\", \"Barring\", \"Because of\", \"Besides\", \"But for\", \"By\", \"But\", \"Concerning\", \"Considering\", \"Contrary to\", \"Counting\", \"Cum\", \"Depending on\", \"Despite\", \"Due to\", \"Except\", \"Except for\", \"Excepting\", \"Excluding\", \"Given\", \"In addition to\", \"in case of\", \"In face of\", \"In favor of\", \"in favour of\", \"In light of\", \"In spite of\", \"In view of\", \"Including\", \"Instead of\", \"Less\", \"Like\", \"Notwithstanding\", \"Of\", \"On account of\", \"On behalf of\", \"Other than\", \"Owing to\", \"Pending\", \"Per\", \"Plus\", \"Preparatory to\", \"Pro\", \"Re\", \"Regarding\", \"Regardless of\", \"Save\", \"Save for\", \"Saving\", \"Than\", \"Thanks to\", \"Unlike\", \"Versus\", \"With\", \"With reference to\", \"With regard to\", \"Worth\"];\n      var multiWordsPrepositions = [\"Prior to\", \"Up to\", \"Up until\", \"Apart from\", \"Close to\", \"Far from\", \"Forward of\", \"In between\", \"In front of\", \"Near to\", \"Next to\", \"On board\", \"On top of\", \"Out of\", \"Outside of\", \"Together with\", \"Up against\", \"Along with\", \"Away from\", \"By means of\", \"Further to\", \"In between\", \"Off of\", \"Out of\", \"According to\", \"As for\", \"As per\", \"As to\", \"As well as\", \"Aside from\", \"Because of\", \"But for\", \"Contrary to\", \"Depending on\", \"Due to\", \"Except for\", \"In addition to\", \"in case of\", \"In face of\", \"In favor of\", \"in favour of\", \"In light of\", \"In spite of\", \"In view of\", \"Instead of\", \"On account of\", \"On behalf of\", \"Other than\", \"Owing to\", \"Preparatory to\", \"Regardless of\", \"Save for\", \"Thanks to\", \"With reference to\", \"With regard to\"];\n      var singleWordPrepositions = [\"About\", \"After\", \"Ago\", \"Around\", \"At\", \"Before\", \"By\", \"Circa\", \"During\", \"Following\", \"For\", \"From\", \"Gone\", \"In\", \"On\", \"Past\", \"Since\", \"Until\", \"till\", \"Aboard\", \"Above\", \"Across\", \"Against\", \"Alongside\", \"Amid\", \"Among\", \"Astride\", \"Atop\", \"Below\", \"Beneath\", \"Beside\", \"Between\", \"Beyond\", \"Far\", \"Inside\", \"Minus\", \"Near\", \"Upon\", \"Opposite\", \"Out\", \"Outside\", \"Over\", \"Through\", \"Throughout\", \"To\", \"Toward\", \"towards\", \"Underneath\", \"With\", \"Within\", \"Without\", \"Ahead\", \"Along\", \"Away\", \"Behind\", \"Down\", \"Into\", \"Off\", \"Onto\", \"Round\", \"Under\", \"Up\", \"Via\", \"Anti\", \"As\", \"Bar\", \"Barring\", \"Besides\", \"But\", \"Concerning\", \"Considering\", \"Counting\", \"Cum\", \"Despite\", \"Except\", \"Excepting\", \"Excluding\", \"Given\", \"Including\", \"Less\", \"Like\", \"Notwithstanding\", \"Of\", \"Pending\", \"Per\", \"Plus\", \"Pro\", \"Re\", \"Regarding\", \"Save\", \"Saving\", \"Than\", \"Unlike\", \"Versus\", \"Worth\"];\n      var pattern = \"\";\n      var prepositionsPresent = [];\n      multiWordsPrepositions.forEach(function (preposition) {\n        pattern = new RegExp(preposition.toLowerCase(), \"g\");\n\n        if (essay.match(pattern) != null) {\n          _this3.state.prepositionsCount += essay.match(pattern).length;\n          prepositionsPresent.push(preposition);\n        }\n      });\n      prepositionsPresent.forEach(function (preposition) {\n        essay = essay.replaceAll(preposition.toLowerCase(), \"\");\n      });\n      singleWordPrepositions.forEach(function (preposition) {\n        var prepositionPattern = new RegExp(\"( |^)\" + preposition.toLowerCase() + \"( |$)\");\n\n        if (essay.match(prepositionPattern)) {\n          _this3.state.prepositionsCount += 1;\n        }\n      });\n    }\n  }, {\n    key: \"countParagraphs\",\n    value: function countParagraphs() {\n      this.state.paragraphsCount = this.state.essayText.split(/\\n/).length;\n    }\n  }, {\n    key: \"checkWordsRange\",\n    value: function checkWordsRange() {\n      console.log(/^\\d+$/.test(this.state.minNumberWords));\n      console.log(/^\\d+$/.test(this.state.maxNumberWords));\n      console.log(this.state.essayWordCount, this.state.minNumberWords, this.state.maxNumberWords);\n\n      if (/^\\d+$/.test(this.state.minNumberWords) && /^\\d+$/.test(this.state.maxNumberWords)) {\n        console.log(\"Both inputs are correct!\");\n\n        if (this.state.essayWordCount > this.state.minNumberWords && this.state.essayWordCount < this.state.maxNumberWords) {\n          console.log(\"Essay word count between range!\");\n        }\n      } else {\n        console.log(\"One or both inputs incorrect! Try again\");\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      if (this.state.isLoading) {\n        return _jsx(View, {\n          children: _jsx(Text, {\n            children: \"Loading..\"\n          })\n        });\n      } else {\n        return _jsxs(View, {\n          style: styles.body,\n          children: [_jsx(Text, {\n            style: styles.title,\n            children: \"AUTOMATED ESSAY MARKING SYSTEM\"\n          }), _jsxs(View, {\n            style: styles.container,\n            children: [_jsx(View, {\n              style: styles.row,\n              children: _jsx(Text, {\n                style: styles.subtitle,\n                children: \"INSERT ESSAY\"\n              })\n            }), _jsx(View, {\n              style: styles.row,\n              children: _jsx(TextInput, {\n                style: styles.input,\n                multiline: true,\n                onChangeText: function onChangeText(essayText) {\n                  return _this4.setState({\n                    essayText: essayText\n                  });\n                },\n                value: this.state.essayText\n              })\n            }), _jsx(View, {\n              style: styles.row,\n              children: _jsx(Text, {\n                style: styles.subtitle,\n                children: \"INSERT TOPIC RELATED WORDS\"\n              })\n            }), _jsxs(View, {\n              style: styles.row,\n              children: [_jsxs(View, {\n                children: [_jsx(Text, {\n                  style: styles.label,\n                  children: \"Key term 1:\"\n                }), _jsx(TextInput, {\n                  style: styles.lecturerInput,\n                  onChangeText: function onChangeText(lecturerInput1) {\n                    return _this4.setState({\n                      lecturerInput1: lecturerInput1\n                    });\n                  },\n                  value: this.state.lecturerInput1\n                })]\n              }), _jsxs(View, {\n                children: [_jsx(Text, {\n                  style: styles.label,\n                  children: \"Key term 2:\"\n                }), _jsx(TextInput, {\n                  style: styles.lecturerInput,\n                  onChangeText: function onChangeText(lecturerInput2) {\n                    return _this4.setState({\n                      lecturerInput2: lecturerInput2\n                    });\n                  },\n                  value: this.state.lecturerInput2\n                })]\n              }), _jsxs(View, {\n                children: [_jsx(Text, {\n                  style: styles.label,\n                  children: \"Key term 3:\"\n                }), _jsx(TextInput, {\n                  style: styles.lecturerInput,\n                  onChangeText: function onChangeText(lecturerInput3) {\n                    return _this4.setState({\n                      lecturerInput3: lecturerInput3\n                    });\n                  },\n                  value: this.state.lecturerInput3\n                })]\n              }), _jsxs(View, {\n                children: [_jsx(Text, {\n                  style: styles.label,\n                  children: \"Key term 4:\"\n                }), _jsx(TextInput, {\n                  style: styles.lecturerInput,\n                  onChangeText: function onChangeText(lecturerInput4) {\n                    return _this4.setState({\n                      lecturerInput4: lecturerInput4\n                    });\n                  },\n                  value: this.state.lecturerInput4\n                })]\n              }), _jsxs(View, {\n                children: [_jsx(Text, {\n                  style: styles.label,\n                  children: \"Key term 5:\"\n                }), _jsx(TextInput, {\n                  style: styles.lecturerInput,\n                  onChangeText: function onChangeText(lecturerInput5) {\n                    return _this4.setState({\n                      lecturerInput5: lecturerInput5\n                    });\n                  },\n                  value: this.state.lecturerInput5\n                })]\n              })]\n            }), _jsx(View, {\n              style: styles.row,\n              children: _jsx(Text, {\n                style: styles.subtitle,\n                children: \"INSERT TOPIC RELATED PHRASES\"\n              })\n            }), _jsxs(View, {\n              style: styles.row,\n              children: [_jsxs(View, {\n                children: [_jsx(Text, {\n                  style: styles.label,\n                  children: \"Key phrase 1:\"\n                }), _jsx(TextInput, {\n                  style: styles.lecturerInput,\n                  onChangeText: function onChangeText(lecturerInputPhrase1) {\n                    return _this4.setState({\n                      lecturerInputPhrase1: lecturerInputPhrase1\n                    });\n                  },\n                  value: this.state.lecturerInputPhrase1\n                })]\n              }), _jsxs(View, {\n                children: [_jsx(Text, {\n                  style: styles.label,\n                  children: \"Key phrase 2:\"\n                }), _jsx(TextInput, {\n                  style: styles.lecturerInput,\n                  onChangeText: function onChangeText(lecturerInputPhrase2) {\n                    return _this4.setState({\n                      lecturerInputPhrase2: lecturerInputPhrase2\n                    });\n                  },\n                  value: this.state.lecturerInputPhrase2\n                })]\n              }), _jsxs(View, {\n                children: [_jsx(Text, {\n                  style: styles.label,\n                  children: \"Key phrase 3:\"\n                }), _jsx(TextInput, {\n                  style: styles.lecturerInput,\n                  onChangeText: function onChangeText(lecturerInputPhrase3) {\n                    return _this4.setState({\n                      lecturerInputPhrase3: lecturerInputPhrase3\n                    });\n                  },\n                  value: this.state.lecturerInputPhrase3\n                })]\n              }), _jsxs(View, {\n                children: [_jsx(Text, {\n                  style: styles.label,\n                  children: \"Key phrase 4:\"\n                }), _jsx(TextInput, {\n                  style: styles.lecturerInput,\n                  onChangeText: function onChangeText(lecturerInputPhrase4) {\n                    return _this4.setState({\n                      lecturerInputPhrase4: lecturerInputPhrase4\n                    });\n                  },\n                  value: this.state.lecturerInputPhrase4\n                })]\n              }), _jsxs(View, {\n                children: [_jsx(Text, {\n                  style: styles.label,\n                  children: \"Key phrase 5:\"\n                }), _jsx(TextInput, {\n                  style: styles.lecturerInput,\n                  onChangeText: function onChangeText(lecturerInputPhrase5) {\n                    return _this4.setState({\n                      lecturerInputPhrase5: lecturerInputPhrase5\n                    });\n                  },\n                  value: this.state.lecturerInputPhrase5\n                })]\n              })]\n            }), _jsx(View, {\n              style: styles.row,\n              children: _jsx(Text, {\n                style: styles.subtitle,\n                children: \"INSERT EXPECTED WORD COUNT RANGE\"\n              })\n            }), _jsxs(View, {\n              style: styles.rowStart,\n              children: [_jsxs(View, {\n                children: [_jsx(Text, {\n                  style: styles.label,\n                  children: \"Min:\"\n                }), _jsx(TextInput, {\n                  style: styles.lecturerInput,\n                  onChangeText: function onChangeText(minNumberWords) {\n                    return _this4.setState({\n                      minNumberWords: minNumberWords\n                    });\n                  },\n                  value: this.state.minNumberWords,\n                  keyboardType: \"numeric\",\n                  maxLength: 5\n                })]\n              }), _jsxs(View, {\n                children: [_jsx(Text, {\n                  style: styles.label,\n                  children: \"Max:\"\n                }), _jsx(TextInput, {\n                  style: styles.lecturerInput,\n                  onChangeText: function onChangeText(maxNumberWords) {\n                    return _this4.setState({\n                      maxNumberWords: maxNumberWords\n                    });\n                  },\n                  value: this.state.maxNumberWords,\n                  keyboardType: \"numeric\",\n                  maxLength: 5\n                })]\n              })]\n            }), _jsx(View, {\n              style: styles.rowEnd,\n              children: _jsx(TouchableOpacity, {\n                style: styles.primaryButton,\n                onPress: function onPress() {\n                  return _this4.processText();\n                },\n                children: _jsx(Text, {\n                  style: styles.buttonText,\n                  children: \"SUBMIT\"\n                })\n              })\n            })]\n          })]\n        });\n      }\n    }\n  }]);\n\n  return HomeScreen;\n}(Component);\n\nexport default HomeScreen;\nvar styles = StyleSheet.create({\n  body: {\n    backgroundColor: \"#F5F5F5\",\n    minHeight: \"100%\"\n  },\n  input: {\n    height: 500,\n    fontSize: 16,\n    padding: 10,\n    backgroundColor: \"#ffffff\",\n    width: \"100%\",\n    borderWidth: 3,\n    borderColor: \"#ABABAB\",\n    boxShadow: \"0px 4px 4px rgba(0, 0, 0, 0.25)\",\n    color: \"#444444\",\n    lineHeight: 25\n  },\n  container: {\n    flex: 1,\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    marginTop: 10,\n    maxWidth: 1100,\n    width: \"100%\",\n    margin: \"auto\",\n    marginBottom: 50,\n    backgroundColor: \"#F1F1F1\",\n    paddingLeft: 40,\n    paddingRight: 40,\n    paddingBottom: 20,\n    boxShadow: \"0px 4px 10px rgba(0, 0, 0, 0.25)\"\n  },\n  row: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    width: \"100%\",\n    flexWrap: \"wrap\",\n    gap: 8\n  },\n  rowEnd: {\n    flexDirection: \"row\",\n    justifyContent: \"end\",\n    width: \"100%\"\n  },\n  rowStart: {\n    flexDirection: \"row\",\n    width: \"100%\",\n    flexWrap: \"wrap\",\n    gap: 25,\n    marginBottom: 25\n  },\n  rowVertical: {\n    flexDirection: \"columns\",\n    justifyContent: \"space-between\",\n    marginTop: 40,\n    backgroundColor: \"#E9E9E9\"\n  },\n  lecturerInput: {\n    backgroundColor: \"#ffffff\",\n    padding: 7,\n    marginBottom: 10,\n    borderWidth: 2,\n    borderColor: \"#ABABAB\",\n    color: \"#444444\"\n  },\n  title: {\n    backgroundColor: \"#E9E9E9\",\n    fontSize: 30,\n    width: \"100%\",\n    textAlign: \"center\",\n    padding: 40,\n    fontStyle: \"normal\",\n    fontWeight: 600,\n    fontSize: 40,\n    lineHeight: 47,\n    letterSpacing: \"0.325em\",\n    color: \"#2EA7EB\",\n    boxShadow: \"0px 10px 5px rgba(0, 0, 0, 0.25)\",\n    marginBottom: 20\n  },\n  primaryButton: {\n    textAlign: \"center\",\n    minWidth: 169,\n    padding: 8,\n    backgroundColor: \"#FFFFFF\",\n    borderWidth: 2.5,\n    borderColor: \"#2EA7EB\"\n  },\n  buttonText: {\n    color: \"#2EA7EB\",\n    fontSize: \"14\",\n    letterSpacing: 1.25\n  },\n  subtitle: {\n    fontStyle: \"normal\",\n    fontWeight: 400,\n    fontSize: 20,\n    lineHeight: 18,\n    letterSpacing: \"0.16em\",\n    marginTop: 30,\n    marginBottom: 10,\n    color: \"#2EA7EB\"\n  },\n  label: {\n    fontStyle: \"normal\",\n    fontWeight: 400,\n    lineHeight: 18,\n    marginBottom: 2,\n    color: \"#444444\"\n  }\n});","map":{"version":3,"sources":["/Users/andreifrandes/AutomatedEssayGradingSystem/Home.js"],"names":["React","Component","HomeScreen","props","state","essayText","isLoading","essayWordCount","essaySentenceCount","averageSentenceLength","averageWordLengthCount","paragraphsCount","lecturerInput1","lecturerInput2","lecturerInput3","lecturerInput4","lecturerInput5","lecturerInputPhrase1","lecturerInputPhrase2","lecturerInputPhrase3","lecturerInputPhrase4","lecturerInputPhrase5","parametersPresentCount","spellingMistakesCount","minNumberWords","maxNumberWords","prepositionsCount","referencesCount","punctuationErrorCount","uniqueWordsPercentage","essayExample","essay","countWords","averageWordLength","countSentences","checkForLecturersParameters","countParagraphs","countPrepositions","checkWordFrequency","checkSpelling","checkPunctuation","countReferences","countPunctuationMistakes","calculateaAverageSentenceLength","percentageUniqueWords","checkUniqueWordsPercentage","calculateFinalGrade","results","sentenceCount","keyTermsPresent","keyPhrasesPresent","navigation","navigate","weights","prepositionCount","essayLengthRules","console","log","grades","keyTermsGrade","keyPhrasesGrade","Math","round","pattern","RegExp","punctuationPotentialErrorsArray","match","correctPuntuationArray","forEach","element","includes","citations","length","wordOccurancesCount","replace","toLowerCase","split","sort","word","uniqueWordsCount","wordKey","wordOccurancesCountLength","Object","keys","essaySentences","validPunctuation","words","wordFrequencyCounter","totalWordLength","sentences","errorCounter","sentenceStartPattern","sentence","lecturerParameteres","lecturerParameteresPhrases","i","checkForParameter","keyTerm","parametersCount","essayLowerCaps","wordPattern","prepositions","multiWordsPrepositions","singleWordPrepositions","prepositionsPresent","preposition","push","replaceAll","prepositionPattern","test","styles","body","title","container","row","subtitle","input","setState","label","lecturerInput","rowStart","rowEnd","primaryButton","processText","buttonText","StyleSheet","create","backgroundColor","minHeight","height","fontSize","padding","width","borderWidth","borderColor","boxShadow","color","lineHeight","flex","flexDirection","alignItems","marginTop","maxWidth","margin","marginBottom","paddingLeft","paddingRight","paddingBottom","justifyContent","flexWrap","gap","rowVertical","textAlign","fontStyle","fontWeight","letterSpacing","minWidth"],"mappings":"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","sourcesContent":["import {\n  StyleSheet,\n  Text,\n  View,\n  TextInput,\n  Button,\n  TouchableOpacity,\n} from \"react-native\";\nimport React, { Component } from \"react\";\n// import { readFile } from \"fs\";\n// import { readDictionaryAsync } from \"spell-checker-js\";\n\n// Set isLoading to true later\n\n// Todo\n// 1. Reset parameters at every turn\n\nclass HomeScreen extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      essayText: \"\",\n      isLoading: false, // set to true later\n      essayWordCount: \"\",\n      essaySentenceCount: \"\",\n      averageSentenceLength: \"\",\n      averageWordLengthCount: \"\",\n      paragraphsCount: \"\",\n      // Store the input from the lecturer\n      lecturerInput1: \"\",\n      lecturerInput2: \"\",\n      lecturerInput3: \"\",\n      lecturerInput4: \"\",\n      lecturerInput5: \"\",\n      lecturerInputPhrase1: \"\",\n      lecturerInputPhrase2: \"\",\n      lecturerInputPhrase3: \"\",\n      lecturerInputPhrase4: \"\",\n      lecturerInputPhrase5: \"\",\n      // Keep track of the parameters present in the essay\n      parametersPresentCount: 0,\n      spellingMistakesCount: 0,\n      // Keep track of the range of words the lecturer expects the essay to be\n      minNumberWords: \"\",\n      maxNumberWords: \"\",\n      // Slider value\n      // Keep track of the number of prepositions\n      prepositionsCount: 0,\n      referencesCount: 0,\n      punctuationErrorCount: 0,\n      uniqueWordsPercentage: 0,\n    };\n  }\n\n  // main function\n  processText() {\n    // console.log(\"Essay:\\n\", this.state.essayText);\n    let essayExample =\n      \"In this essay we will  discuss the... Notion that virtue is knowledge. We will do this by following Plato's own route into the discussion - a refutation of Meno's misconception of knowledge. The argument Plato provides to this end gives us crucial contextual information and allows us to see how Plato derives his doctrine that virtue is knowledge. We will look at the terms Plato uses to define virtuous and non-virtuous actions and analyse the connotations these held for him. I will then provide an exposition of the traditional formulation of the platonic 'moral paradox' before arguing that this paradox only exists if one misinterprets Plato's own text. 1. Desire for the good Plato's Meno focuses on the issue of virtue - its nature and its properties. During the dialogue several definitions of virtue are discussed. However, the definition that seems to be settled upon entails the doctrine that virtue is knowledge. This definition is proposed as a response to Meno's suggestion that virtue is a term encompassing two elements: firstly that virtue is the desire for good things and secondly that it is the ability to obtain good things. By way of answer, Socrates suggests that, in fact, everyone desires the good. As virtue is not present in all men, virtue cannot be the desire for good things. Socrates' argument for it.\";\n    // Store the essay from the state inside a variable\n    // const essay = this.state.essayText; // replace\n\n    const essay = essayExample; // change\n\n    // Count the number of words for the whole essay\n    this.countWords();\n\n    // calculate the average word length\n    this.averageWordLength();\n\n    // Count the number of sentences for the whole essay\n    this.countSentences();\n\n    // Calculate the average number of words per sentence\n    // Save the data inside the state to be used during the check\n\n    // Check how many of the lecture's parameters are present inside the essay\n    this.checkForLecturersParameters();\n\n    // Count the number of paragraphs inside the essay\n    this.countParagraphs();\n\n    // Check if the of words inside the essay is in the range speciied by the lecturer\n    // this.checkWordsRange();\n    // Count the number of prepositions present in the essay\n    this.countPrepositions();\n    // Check how frequently each word appear in the essay\n    this.checkWordFrequency();\n    this.checkSpelling();\n    this.checkPunctuation();\n    this.checkSpelling();\n    this.countReferences();\n    this.countPunctuationMistakes();\n    this.calculateaAverageSentenceLength();\n    this.percentageUniqueWords();\n    this.checkUniqueWordsPercentage();\n\n    // Calculate the overall grade of the essay\n    this.calculateFinalGrade();\n\n    // this.props.navigation.navigate(\"Feedback\", {\n    //   number: 2,\n    // });\n    const results = {\n      essayWordCount: this.state.essayWordCount,\n      sentenceCount: this.state.sentenceCount,\n      paragraphsCount: this.state.paragraphsCount,\n      prepositionsCount: this.state.prepositionsCount,\n      referencesCount: this.state.referencesCount,\n      averageSentenceLength: this.state.averageSentenceLength,\n      averageWordLengthCount: this.state.averageWordLengthCount,\n      percentageUniqueWords: this.state.percentageUniqueWords,\n      keyTermsPresent: this.state.keyTermsPresent,\n      keyPhrasesPresent: this.state.keyPhrasesPresent,\n      spellingMistakesCount: this.state.spellingMistakesCount,\n      // essaySentenceCount: this.state.essaySentenceCount,\n      punctuationErrorCount: this.state.punctuationErrorCount,\n      uniqueWordsPercentage: this.state.uniqueWordsPercentage,\n    };\n\n    // Check the punctuation\n    // this.checkPunctuation1();\n\n    // var dictionary = new Typo(\"en_EN\", false, false, {\n    //   dictionaryPath: \"typo/dictionaries\",\n    // });\n\n    // var is_spelled_correctly = dictionary.check(\"mispelled\");\n\n    // console.log(is_spelled_correctly);\n    // -> ['blahblahblah', 'olololo']\n\n    // Send the object cntaining the essay features to the results page\n    this.props.navigation.navigate(\"Feedback\", {\n      results: results,\n    });\n  }\n\n  // Function to calculate the final grade\n  calculateFinalGrade() {\n    // Set appropriate weights for each of the features, which can be changed later\n    let weights = {\n      essayWordCount: 0.12,\n      sentenceCount: 0.3,\n      paragraphsCount: 0.12,\n      prepositionCount: 0.4,\n      referencesCount: 0.1,\n      averageSentenceLength: 0.6,\n      averageWordLength: 0.4,\n      percentageUniqueWords: 0.4,\n      keyTermsPresent: 0.15,\n      keyPhrasesPresent: 0.15,\n      punctuationErrorCount: 0.15,\n    };\n\n    // Create a general set of variable that gives different rules for the essay depending on its length\n    let essayLengthRules = 0;\n\n    // Check which category the essay belongs to depending on its length\n    // if (this.state.maxNumberWords <= 1000 || this.state.minNumberWords >= 300) {\n    if (this.state.maxNumberWords <= 800) {\n      essayLengthRules = 500;\n      console.log(\"essayLengthRules: 500\");\n    } else if (\n      this.state.maxNumberWords <= 1400 ||\n      (this.state.minNumberWords >= 800 && this.state.minNumberWords <= 1000)\n    ) {\n      essayLengthRules = 1000;\n      console.log(\"essayLengthRules: 1000\");\n    } else if (\n      this.state.maxNumberWords > 1500 &&\n      this.state.maxNumberWords < 2000 &&\n      this.state.minNumberWords > 1000\n    ) {\n      essayLengthRules = 1500;\n      console.log(\"essayLengthRules: 1500\");\n      // } else if (this.state.minNumberWords >= 1700) {\n    } else if (this.state.maxNumberWords > 2000) {\n      essayLengthRules = 2000;\n      console.log(\"essayLengthRules: 2000\");\n    } else {\n      essayLengthRules = 500;\n    }\n\n    // Write differnet rules depending on how long the essay is\n    // 1 - Rules for essays of 500 words\n    let grades = {\n      essayWordCount: 0,\n      keyTermsGrade: 0,\n      keyPhrasesGrade: 0,\n    };\n\n    // --------------------\n    // CALCULATE THE GRADE FOR THE WORD COUNT\n    // -------------------\n    // console.log(\"word count: \", this.state.essayWordCount);\n    // console.log(\"min number words: \", this.state.minNumberWords);\n    // console.log(\"max number words: \", this.state.maxNumberWords);\n    // console.log(\n    //   \"this.state.minNumberWord * 90/100: \",\n    //   (parseInt(this.state.minNumberWords) * 90) / 100\n    // );\n    // console.log(\n    //   \"this.state.maxNumberWord * 110) / 100: \",\n    //   (this.state.maxNumberWords * 110) / 100\n    // );\n    // this.state.essayWordCount <= (this.state.maxNumberWord * 110) / 100;\n\n    if (this.state.essayWordCount <= this.state.maxNumberWords) {\n      console.log(\"max limit of words passed!\");\n    }\n\n    // Calculate the grande for the essayWordCount feature\n    // Excelent - 100 points\n    // If the word count is in the range expected by the educator\n    if (\n      this.state.essayWordCount >= this.state.minNumberWords &&\n      this.state.essayWordCount <= this.state.maxNumberWords\n    ) {\n      grades.essayWordCount = 100;\n      console.log(\"word count : excenelent\");\n    }\n    // Accomplishes - 75 points\n    // If the word count is in 10 % range of the expected word count\n    else if (\n      this.state.essayWordCount >= (this.state.minNumberWords * 90) / 100 &&\n      this.state.essayWordCount <= (this.state.maxNumberWords * 110) / 100\n    ) {\n      grades.essayWordCount = 75;\n      console.log(\"word count : accomplishes\");\n    }\n\n    // Capable - 50 points\n    // If the word count is off by more than 10% and less than 35 percent\n    else if (\n      this.state.essayWordCount >= (this.state.minNumberWords * 70) / 100 &&\n      this.state.essayWordCount <= (this.state.maxNumberWords * 130) / 100\n    ) {\n      grades.essayWordCount = 50;\n      console.log(\"word count : capable\");\n    }\n\n    // Beginned - 25 points\n    // If the word count is off by more than 35 percent\n    else if (\n      this.state.essayWordCount < (this.state.minNumberWords * 70) / 100 ||\n      this.state.essayWordCount > (this.state.maxNumberWords * 130) / 100\n    ) {\n      grades.essayWordCount = 25;\n      console.log(\"word count : beginner\");\n    }\n\n    // ------------------\n    // Calculate grade for key terms\n    // -----------------\n    console.log(this.state.keyTermsPresent);\n    if (this.state.keyTermsPresent == 5) {\n      grades.keyTermsGrade = 100;\n    } else if (this.state.keyTermsPresent == 4) {\n      grades.keyTermsGrade = 75;\n    } else if (this.state.keyTermsPresent >= 2) {\n      grades.keyTermsGrade = 50;\n    } else if (this.state.keyTermsPresent == 1) {\n      grades.keyTermsGrade = 25;\n    } else {\n      grades.keyTermsGrade = 0;\n    }\n    // ------------------\n    // Calculate grade for key phrases\n    // -----------------\n    console.log(this.state.keyPhrasesPresent);\n    if (this.state.keyPhrasesPresent == 5) {\n      grades.keyPhrasesGrade = 100;\n    } else if (this.state.keyPhrasesPresent == 4) {\n      grades.keyPhrasesGrade = 75;\n    } else if (this.state.keyPhrasesPresent >= 2) {\n      grades.keyPhrasesGrade = 50;\n    } else if (this.state.keyPhrasesPresent == 1) {\n      grades.keyPhrasesGrade = 25;\n    } else {\n      grades.keyPhrasesGrade = 0;\n    }\n    // ------------------\n    // Calculate grade for punctuation\n    console.log(this.state.punctuationErrorCount, \": punctuationErrorCount\");\n    // -----------------\n\n    console.log(grades);\n  }\n\n  calculateaAverageSentenceLength() {\n    this.state.averageSentenceLength = Math.round(\n      this.state.essayWordCount / this.state.essaySentenceCount\n    );\n\n    // console.log(\"this.state.essayWordCount: \", this.state.essayWordCount);\n    // console.log(\n    //   \"this.state.essaySentenceCount: \",\n    //   this.state.essaySentenceCount\n    // );\n    // console.log(\"sentence length: \", this.state.averageSentenceLength);\n  }\n\n  countPunctuationMistakes() {\n    let essay = this.state.essayText;\n    // define a pattern that looks for any potential punctuation mistakes\n    let pattern = new RegExp(/[.?!]{2,}/g);\n    // Find all the instances where a potential punctuation mistake could occure\n    let punctuationPotentialErrorsArray = essay.match(pattern);\n\n    // console.log(\"Punctuatuion check\", punctuationPotentialErrorsArray);\n\n    // Array storing the punctuation allowed for sentence endings\n    let correctPuntuationArray = [\n      \"?!\",\n      \"...\",\n      \").\",\n      \")?\",\n      \")!\",\n      \")...\",\n      \")?!\",\n      \".(\",\n      \"?(\",\n      \"!(\",\n      \"...(\",\n      \"?!(\",\n      \"].\",\n      \"]...\",\n      \"]?\",\n      \"]!\",\n      \"]?!\",\n      \".[\",\n      \"...[\",\n      \"?[\",\n      \"![\",\n      \"?![\",\n      '\".',\n      '\"?',\n      '\"!',\n      '\"?!',\n      '...\"',\n      '.\"',\n      '?\"',\n      '!\"',\n      '?!\"',\n      '...\"',\n    ];\n\n    // Check whether the sentence endings are correct or not\n    if (punctuationPotentialErrorsArray != null) {\n      punctuationPotentialErrorsArray.forEach((element) => {\n        if (!correctPuntuationArray.includes(element)) {\n          console.log(\"error: \", element);\n          this.state.punctuationErrorCount += 1;\n        }\n      });\n    }\n\n    // console.log(\"punctuation errors: \", this.state.punctuationErrorCount);\n  }\n\n  countReferences() {\n    let essay = this.state.essayText;\n\n    // Create a pattern for detecting all the inline references\n    let pattern = new RegExp(/\\(\\D+\\d{4}\\)/g);\n\n    // Find all the instances of the pattern in the text\n    let citations = essay.match(pattern);\n\n    // store the number of citations in an array\n    if (citations == null) {\n      this.state.referencesCount = 0;\n    } else {\n      this.state.referencesCount = citations.length;\n    }\n  }\n\n  percentageUniqueWords() {\n    let essay = this.state.essayText;\n    // Create an object to store all the words inside the essay and the amount of times they are present\n    let wordOccurancesCount = {};\n    // Replace all the characters with an empty space before preceding to counting the total number of words\n    essay = essay.replace(/[^a-zA-Z0-9 ]/g, \"\");\n    // Remove multiple spaces with single space to lead to correct word count\n    essay = essay.replace(/[ ]{2,}/g, \" \");\n    // turn all the words to lowercase to ease the search\n    essay = essay.toLowerCase();\n    // divide the essay into individual words\n    essay = essay.split(\" \");\n\n    // Sort the array of words\n    essay.sort();\n\n    for (let word of essay) {\n      // check if the word is already in accounted for, otherwise add it\n      if (wordOccurancesCount[word]) {\n        // Increase the number of times the word is present\n        wordOccurancesCount[word] += 1;\n      } else {\n        // If the word is not present, add it\n        wordOccurancesCount[word] = 1;\n      }\n    }\n\n    let uniqueWordsCount = 0;\n    // loop through the object and count how many unique words there are\n    for (let wordKey in wordOccurancesCount) {\n      // console.log(wordOccurancesCount[wordKey]);\n      // Count all the unique words\n      if (wordOccurancesCount[wordKey] == 1) {\n        uniqueWordsCount += 1;\n      }\n    }\n\n    // console.log(\"UNIQUE WORDS COUNT: \", uniqueWordsCount);\n\n    // Get the number of words in the essay, with each word adding 1 no matter how many times it appears\n    let wordOccurancesCountLength = Object.keys(wordOccurancesCount).length;\n    // calulate what percentage of all the words appear only once in the essay, representing the unique words\n    let percentageUniqueWords = Math.round(\n      (uniqueWordsCount / wordOccurancesCountLength) * 100\n    );\n\n    // Store the percentage of unique words inside the state\n    this.state.uniqueWordsPercentage = percentageUniqueWords;\n  }\n\n  checkPunctuation1() {\n    let essay = this.state.essayText;\n\n    // Break the essay in sentences to be checked for correct punctuation\n    let essaySentences = essay.match(/[^\\.!\\?]+[\\.!\\?]+/g);\n    //\n    console.log(\"CHECK PUNCTUATION: \", essaySentences);\n\n    // Create an array that contains the valid punctuation for a sentence\n    let validPunctuation = [\".\", \"...\", \"?\", \"?!\", \"!\"];\n\n    // for each of the sentences, check if the punctuation at the end is correct\n  }\n\n  // Not working\n  checkSpelling() {\n    // const fs = require(\"fs\");\n    // fs.readFile(\"file.txt\", \"utf-8\", (err, data) => {\n    //   // Check if there is an error\n    //   if (err) {\n    //     console.error(err);\n    //     return null;\n    //   }\n    //   // Log the file contents\n    //   console.log(\"DATA \", data);\n    // });\n  }\n\n  // Counts the words only NOT symbols\n  countWords() {\n    let essay = this.state.essayText;\n    // Replace all the characters with an empty space before preceding to counting the total number of words\n    essay = essay.replace(/[^a-zA-Z0-9 ]/g, \"\");\n    // Remove multiple spaces with single space to lead to correct word count\n    essay = essay.replace(/[ ]{2,}/g, \" \");\n\n    // Count the number of words\n    this.state.essayWordCount = essay.split(\" \").length;\n    // console.log(\"WORD!!: \", essay.split(\" \"));\n  }\n\n  checkUniqueWordsPercentage() {\n    let essay = this.state.essayText;\n    // Replace all the characters with an empty space before preceding to counting the total number of words\n    essay = essay.replace(/[^a-zA-Z0-9 ]/g, \"\");\n    // Remove multiple spaces with single space to lead to correct word count\n    essay = essay.replace(/[ ]{2,}/g, \" \");\n\n    // store the words in an array\n    let words = essay.split(\" \");\n    words.sort();\n    // console.log(words);\n  }\n\n  // Count how often each word is present\n  checkWordFrequency() {\n    let essay = this.state.essayText;\n    essay =\n      \"In this essay we will  discuss the... Notion that virtue is knowledge. We will do this by following Plato's own route into the discussion - a refutation of Meno's misconception of knowledge. The argument Plato provides to this end gives us crucial contextual information and allows us to see how Plato derives his doctrine that virtue is knowledge. We will look at the terms Plato uses to define virtuous and non-virtuous actions and analyse the connotations these held for him. I will then provide an exposition of the traditional formulation of the platonic 'moral paradox' before arguing that this paradox only exists if one misinterprets Plato's own text. 1. Desire for the good Plato's Meno focuses on the issue of virtue - its nature and its properties. During the dialogue several definitions of virtue are discussed. However, the definition that seems to be settled upon entails the doctrine that virtue is knowledge. This definition is proposed as a response to Meno's suggestion that virtue is a term encompassing two elements: firstly that virtue is the desire for good things and secondly that it is the ability to obtain good things. By way of answer, Socrates suggests that, in fact, everyone desires the good. As virtue is not present in all men, virtue cannot be the desire for good things. Socrates' argument for it.\";\n    // Replace all the characters with an empty space before preceding to counting the total number of words\n    essay = essay.replace(/[^a-zA-Z0-9 ]/g, \"\");\n    // Remove multiple spaces with single space to lead to correct word count\n    essay = essay.replace(/[ ]{2,}/g, \" \");\n    // Count the number of words\n    essay = essay.split(\" \");\n\n    let wordFrequencyCounter = {};\n\n    // Loop through all the word in the essay, and keep count of how many times they appear\n    essay.forEach((word) => {\n      // If the word is not present, add it to the dictionary\n      if (!wordFrequencyCounter[word]) {\n        wordFrequencyCounter[word] = 1;\n      } else {\n        // If the word is already present in the dictionary, increase its count number\n        wordFrequencyCounter[word] += 1;\n      }\n    });\n\n    // console.group(wordFrequencyCounter);\n  }\n\n  // Check the average length of the words\n  averageWordLength() {\n    let essay = this.state.essayText;\n\n    // Replace all the characters with an empty space before preceding to counting the total number of words\n    essay = essay.replace(/[^a-zA-Z0-9 ]/g, \"\");\n    // Remove multiple spaces with single space to lead to correct word count\n    essay = essay.replace(/[ ]{2,}/g, \" \");\n    // store all the words inside an array to be able to count the word length after\n    essay = essay.split(\" \");\n\n    let totalWordLength = 0;\n    // Calculate the length of each word and add it together to be able to calculater the average\n    essay.forEach((word) => {\n      totalWordLength += word.length;\n    });\n\n    // Divide the sum of all length of each word by the total number of words\n    // console.log(\n    //   \"average length: \",\n    //   totalWordLength / this.state.essayWordCount\n    // );\n    // console.log(Math.round(totalWordLength / this.state.essayWordCount));\n    this.state.averageWordLengthCount = Math.round(\n      totalWordLength / this.state.essayWordCount\n    );\n    // console.log(this.state.averageWordLengthCount);\n  }\n\n  countSentences() {\n    // Check the words followed by . or ! or ?, and followed by a whitespace, which signify then end on a sentence\n    let essay = this.state.essayText;\n    // console.log(\"---ESSAY-----: \", essay);\n\n    // console.log(\"Sentences: \", essay.match(/\\w[.!?]\\s*\\$*/g));\n    let sentences = essay.match(/\\w[.!?]\\s*\\$*/g);\n    // console.log(sentences);\n    if (sentences != null) {\n      this.state.sentenceCount = essay.match(/\\w[.!?]\\s*\\$*/g).length;\n    } else {\n      this.state.sentenceCount = 0;\n    }\n  }\n\n  checkPunctuation() {\n    let essay = this.state.essayText;\n    // Check the words followed by . or ! or ?, and followed by a whitespace, which signify then end on a sentence\n\n    // essay =\n    // \"In this essay we will  discuss the...otion that virtue is knowledge. (We will do this by following Plato's own route into the discussion - a refutation of Meno's misconception of knowledge. \\\"The argument Plato provides to this end gives us crucial contextual information and allows us to see how Plato derives his doctrine that virtue is knowledge. (altought)We will look at the terms Plato uses to define virtuous and non-virtuous actions and analyse the connotations these held for him. I will then provide an exposition of the traditional formulation of the platonic 'moral paradox' before arguing that this paradox only exists if one misinterprets Plato's own text. 1. Desire for the good Plato's Meno focuses on the issue of virtue - its nature and its properties. During the dialogue several definitions of virtue are discussed. However, the definition that seems to be settled upon entails the doctrine that virtue is knowledge. This definition is proposed as a response to Meno's suggestion that virtue is a term encompassing two elements: firstly that virtue is the desire for good things and secondly that it is the ability to obtain good things. By way of answer, Socrates suggests that, in fact, everyone desires the good. As virtue is not present in all men, virtue cannot be the desire for good things. Socrates' argument for it.\";\n    // console.log(essay.match(/[^.!?]+[.!?]/g));\n\n    let errorCounter = 0;\n    // Breack the essay into sentences and check that it starts with the capitalised word\n    essay = essay.match(/[^.!?]+[.!?]/g);\n    // console.log(essay);\n\n    // Check that the first occurance is a number OR \" OR capitalised word\n    let sentenceStartPattern = /^ *[A-Z1-9\"\\(]/g;\n\n    // Check if all the sentences start with a capitalised letter or a number or a symbol found at the beginning of the sentence\n    essay.forEach((sentence) => {\n      if (!sentence.match(sentenceStartPattern)) {\n        // console.log(\"Error, sentence written incorscely:  \", sentence);\n        errorCounter += 1;\n      }\n    });\n  }\n\n  checkForLecturersParameters() {\n    // Reset the parameter count inside the state to count correctly at each iteration\n    this.state.parametersPresentCount = 0;\n\n    // Store all the topic key terms provided by the lecturer in an array to ease the search for individual topic terms\n    let lecturerParameteres = [\n      this.state.lecturerInput1,\n      this.state.lecturerInput2,\n      this.state.lecturerInput3,\n      this.state.lecturerInput4,\n      this.state.lecturerInput5,\n    ];\n    let lecturerParameteresPhrases = [\n      this.state.lecturerInputPhrase1,\n      this.state.lecturerInputPhrase2,\n      this.state.lecturerInputPhrase3,\n      this.state.lecturerInputPhrase4,\n      this.state.lecturerInputPhrase5,\n    ];\n    let keyTermsPresent = 0;\n    let keyPhrasesPresent = 0;\n    // Check how many of the key terms parameters are present inside the essay\n    for (let i = 0; i < lecturerParameteres.length; i++) {\n      keyTermsPresent += this.checkForParameter(lecturerParameteres[i]);\n    }\n\n    // Check how many of the key phrases parameters are present inside the essay\n    for (let i = 0; i < lecturerParameteresPhrases.length; i++) {\n      keyPhrasesPresent += this.checkForParameter(\n        lecturerParameteresPhrases[i]\n      );\n    }\n\n    this.state.keyTermsPresent = keyTermsPresent;\n    this.state.keyPhrasesPresent = keyPhrasesPresent;\n  }\n\n  checkForParameter(keyTerm) {\n    // keep track of the number of parameters present\n    let parametersCount = 0;\n    // Convert the whole essay to lowercase words, to ease the search for each term\n    let essayLowerCaps = this.state.essayText.toLowerCase();\n    // Make a copy of the essay text to be used for checking different parameters(the ones containinh symbols or spaces)\n    let essay = essayLowerCaps;\n    // Remove all symbols with white spaces\n    essay = essay.replace(/[^a-zA-Z0-9 ]/g, \"\");\n    // Remove multiple spaces with single space to lead to correct word count\n    essay = essay.replace(/[ ]{2,}/g, \" \");\n\n    // Initiate an empty pattern to be replaced by the word looked for\n    let wordPattern = \"\";\n    // Check if the parameters have been added by the lecturer, and if he essay contains them\n    if (keyTerm != \"\") {\n      keyTerm = keyTerm.toLowerCase();\n      // Check if the topic term contains more than one word, as well as special characters such as - or .\n      if (keyTerm.match(/^[a-zA-Z]*$/) == null) {\n        // If the lectures input containe more than one words, check to find it in the initial text before formating\n        if (essayLowerCaps.includes(keyTerm)) {\n          console.log(\"PARAMETER PRESENT\");\n          parametersCount += 1;\n        }\n      } else {\n        // create a pattern for the lecturers input to be found inside the text\n        wordPattern = new RegExp(\"( |^)\" + keyTerm + \"( |$)\");\n        // Check if the parameter is present in the essay, and record in the state if it is\n        if (essay.match(wordPattern) != null) {\n          console.log(\"PARAMETER PRESENT\");\n          parametersCount += 1;\n        }\n      }\n    }\n\n    return parametersCount;\n  }\n\n  // // Helper function to cehck for individual search terms\n  // checkForParameter(keyTerm) {\n  //   // keep track of the number of parameters present\n  //   // let parametersCount = 0;\n  //   // Convert the whole essay to lowercase words, to ease the search for each term\n  //   let essayLowerCaps = this.state.essayText.toLowerCase();\n  //   // Make a copy of the essay text to be used for checking different parameters(the ones containinh symbols or spaces)\n  //   let essay = essayLowerCaps;\n  //   // Remove all symbols with white spaces\n  //   essay = essay.replace(/[^a-zA-Z0-9 ]/g, \"\");\n  //   // Remove multiple spaces with single space to lead to correct word count\n  //   essay = essay.replace(/[ ]{2,}/g, \" \");\n\n  //   // Initiate an empty pattern to be replaced by the word looked for\n  //   let wordPattern = \"\";\n  //   // Check if the parameters have been added by the lecturer, and if he essay contains them\n  //   if (keyTerm != \"\") {\n  //     keyTerm = keyTerm.toLowerCase();\n  //     // Check if the topic term contains more than one word, as well as special characters such as - or .\n  //     if (keyTerm.match(/^[a-zA-Z]*$/) == null) {\n  //       // If the lectures input containe more than one words, check to find it in the initial text before formating\n  //       if (essayLowerCaps.includes(keyTerm)) {\n  //         console.log(\"PARAMETER PRESENT\");\n  //         this.state.parametersPresentCount += 1;\n  //       }\n  //     } else {\n  //       // create a pattern for the lecturers input to be found inside the text\n  //       wordPattern = new RegExp(\"( |^)\" + keyTerm + \"( |$)\");\n  //       // Check if the parameter is present in the essay, and record in the state if it is\n  //       if (essay.match(wordPattern) != null) {\n  //         console.log(\"PARAMETER PRESENT\");\n  //         this.state.parametersPresentCount += 1;\n  //       }\n  //     }\n  //   }\n  // }\n\n  countPrepositions() {\n    let essay = this.state.essayText.toLowerCase();\n    const prepositions = [\n      \"About\",\n      \"After\",\n      \"Ago\",\n      \"Around\",\n      \"At\",\n      \"Before\",\n      \"By\",\n      \"Circa\",\n      \"During\",\n      \"Following\",\n      \"For\",\n      \"From\",\n      \"Gone\",\n      \"In\",\n      \"On\",\n      \"Past\",\n      \"Prior to\",\n      \"Since\",\n      \"Until\",\n      \"till\",\n      \"Up to\",\n      \"Up until\",\n      \"Aboard\",\n      \"Above\",\n      \"Across\",\n      \"Against\",\n      \"Alongside\",\n      \"Amid\",\n      \"Among\",\n      \"Apart from\",\n      \"Astride\",\n      \"At\",\n      \"Atop\",\n      \"Behind\",\n      \"Below\",\n      \"Beneath\",\n      \"Beside\",\n      \"Between\",\n      \"Beyond\",\n      \"By\",\n      \"Close to\",\n      \"Far\",\n      \"Far from\",\n      \"Forward of\",\n      \"From\",\n      \"In\",\n      \"In between\",\n      \"In front of\",\n      \"Inside\",\n      \"Into\",\n      \"Minus\",\n      \"Near\",\n      \"Near to\",\n      \"Next to\",\n      \"Of\",\n      \"Off\",\n      \"On\",\n      \"On board\",\n      \"On top of\",\n      \"Onto\",\n      \"Upon\",\n      \"Opposite\",\n      \"Out\",\n      \"Out of\",\n      \"Outside\",\n      \"Outside of\",\n      \"Over\",\n      \"Round\",\n      \"Through\",\n      \"Throughout\",\n      \"To\",\n      \"Together with\",\n      \"Toward\",\n      \"towards\",\n      \"Under\",\n      \"Underneath\",\n      \"Up against\",\n      \"With\",\n      \"Within\",\n      \"Without\",\n      \"Above\",\n      \"Across\",\n      \"Against\",\n      \"Ahead\",\n      \"Along\",\n      \"Along with\",\n      \"Amid\",\n      \"Around\",\n      \"Away\",\n      \"Away from\",\n      \"Behind\",\n      \"Below\",\n      \"Beneath\",\n      \"By means of\",\n      \"Down\",\n      \"Further to\",\n      \"In between\",\n      \"Into\",\n      \"Off\",\n      \"Off of\",\n      \"On\",\n      \"Onto\",\n      \"Over\",\n      \"Out of\",\n      \"Past\",\n      \"Round\",\n      \"Through\",\n      \"Toward/towards\",\n      \"Under\",\n      \"Up\",\n      \"Via\",\n      \"About\",\n      \"According to\",\n      \"Anti\",\n      \"As\",\n      \"As for\",\n      \"As per\",\n      \"As to\",\n      \"As well as\",\n      \"Aside from\",\n      \"Bar\",\n      \"Barring\",\n      \"Because of\",\n      \"Besides\",\n      \"But for\",\n      \"By\",\n      \"But\",\n      \"Concerning\",\n      \"Considering\",\n      \"Contrary to\",\n      \"Counting\",\n      \"Cum\",\n      \"Depending on\",\n      \"Despite\",\n      \"Due to\",\n      \"Except\",\n      \"Except for\",\n      \"Excepting\",\n      \"Excluding\",\n      \"Given\",\n      \"In addition to\",\n      \"in case of\",\n      \"In face of\",\n      \"In favor of\",\n      \"in favour of\",\n      \"In light of\",\n      \"In spite of\",\n      \"In view of\",\n      \"Including\",\n      \"Instead of\",\n      \"Less\",\n      \"Like\",\n      \"Notwithstanding\",\n      \"Of\",\n      \"On account of\",\n      \"On behalf of\",\n      \"Other than\",\n      \"Owing to\",\n      \"Pending\",\n      \"Per\",\n      \"Plus\",\n      \"Preparatory to\",\n      \"Pro\",\n      \"Re\",\n      \"Regarding\",\n      \"Regardless of\",\n      \"Save\",\n      \"Save for\",\n      \"Saving\",\n      \"Than\",\n      \"Thanks to\",\n      \"Unlike\",\n      \"Versus\",\n      \"With\",\n      \"With reference to\",\n      \"With regard to\",\n      \"Worth\",\n    ];\n    // Store all the prepositions in an array to be looked for inside the essay\n    const multiWordsPrepositions = [\n      \"Prior to\",\n      \"Up to\",\n      \"Up until\",\n      \"Apart from\",\n      \"Close to\",\n      \"Far from\",\n      \"Forward of\",\n      \"In between\",\n      \"In front of\",\n      \"Near to\",\n      \"Next to\",\n      \"On board\",\n      \"On top of\",\n      \"Out of\",\n      \"Outside of\",\n      \"Together with\",\n      \"Up against\",\n      \"Along with\",\n      \"Away from\",\n      \"By means of\",\n      \"Further to\",\n      \"In between\",\n      \"Off of\",\n      \"Out of\",\n      \"According to\",\n      \"As for\",\n      \"As per\",\n      \"As to\",\n      \"As well as\",\n      \"Aside from\",\n      \"Because of\",\n      \"But for\",\n      \"Contrary to\",\n      \"Depending on\",\n      \"Due to\",\n      \"Except for\",\n      \"In addition to\",\n      \"in case of\",\n      \"In face of\",\n      \"In favor of\",\n      \"in favour of\",\n      \"In light of\",\n      \"In spite of\",\n      \"In view of\",\n      \"Instead of\",\n      \"On account of\",\n      \"On behalf of\",\n      \"Other than\",\n      \"Owing to\",\n      \"Preparatory to\",\n      \"Regardless of\",\n      \"Save for\",\n      \"Thanks to\",\n      \"With reference to\",\n      \"With regard to\",\n    ];\n\n    const singleWordPrepositions = [\n      \"About\",\n      \"After\",\n      \"Ago\",\n      \"Around\",\n      \"At\",\n      \"Before\",\n      \"By\",\n      \"Circa\",\n      \"During\",\n      \"Following\",\n      \"For\",\n      \"From\",\n      \"Gone\",\n      \"In\",\n      \"On\",\n      \"Past\",\n      \"Since\",\n      \"Until\",\n      \"till\",\n      \"Aboard\",\n      \"Above\",\n      \"Across\",\n      \"Against\",\n      \"Alongside\",\n      \"Amid\",\n      \"Among\",\n      \"Astride\",\n      \"Atop\",\n      \"Below\",\n      \"Beneath\",\n      \"Beside\",\n      \"Between\",\n      \"Beyond\",\n      \"Far\",\n      \"Inside\",\n      \"Minus\",\n      \"Near\",\n      \"Upon\",\n      \"Opposite\",\n      \"Out\",\n      \"Outside\",\n      \"Over\",\n      \"Through\",\n      \"Throughout\",\n      \"To\",\n      \"Toward\",\n      \"towards\",\n      \"Underneath\",\n      \"With\",\n      \"Within\",\n      \"Without\",\n      \"Ahead\",\n      \"Along\",\n      \"Away\",\n      \"Behind\",\n      \"Down\",\n      \"Into\",\n      \"Off\",\n      \"Onto\",\n      \"Round\",\n      \"Under\",\n      \"Up\",\n      \"Via\",\n      \"Anti\",\n      \"As\",\n      \"Bar\",\n      \"Barring\",\n      \"Besides\",\n      \"But\",\n      \"Concerning\",\n      \"Considering\",\n      \"Counting\",\n      \"Cum\",\n      \"Despite\",\n      \"Except\",\n      \"Excepting\",\n      \"Excluding\",\n      \"Given\",\n      \"Including\",\n      \"Less\",\n      \"Like\",\n      \"Notwithstanding\",\n      \"Of\",\n      \"Pending\",\n      \"Per\",\n      \"Plus\",\n      \"Pro\",\n      \"Re\",\n      \"Regarding\",\n      \"Save\",\n      \"Saving\",\n      \"Than\",\n      \"Unlike\",\n      \"Versus\",\n      \"Worth\",\n    ];\n    // console.log(essay);\n    let pattern = \"\";\n    let prepositionsPresent = [];\n    multiWordsPrepositions.forEach((preposition) => {\n      // str.match(new RegExp(\"thanks to me\",\"g\"))\n      // Create a regular expresion pattern containing the multiline preposition looked for\n      pattern = new RegExp(preposition.toLowerCase(), \"g\");\n\n      // Check if the preposition is present, and how many times, then add it to the total count of prepositions\n      if (essay.match(pattern) != null) {\n        this.state.prepositionsCount += essay.match(pattern).length;\n        prepositionsPresent.push(preposition);\n      }\n\n      // Remove present prepositions from the essays, to be able to check for the single prepositions after\n      // TODO\n    });\n\n    // console.log(\"prepositionsCount:\", this.state.prepositionsCount);\n    // console.log(prepositionsPresent);\n    // console.log(essay);\n\n    // Remove the multi word prepositions from he rext in order to accurately count the singli word prepositions\n    prepositionsPresent.forEach((preposition) => {\n      essay = essay.replaceAll(preposition.toLowerCase(), \"\");\n    });\n    // console.log(essay);\n\n    singleWordPrepositions.forEach((preposition) => {\n      // prepositionPattern = new RegExp(\"( |^)\" + preposition.toLowerCase() + \"( |$)\");\n      let prepositionPattern = new RegExp(\n        \"( |^)\" + preposition.toLowerCase() + \"( |$)\"\n      );\n      if (essay.match(prepositionPattern)) {\n        // Increase the count if the preposition is present\n        // console.log(\"singleline\", preposition);\n        this.state.prepositionsCount += 1;\n      }\n    });\n    // console.log(this.state.prepositionsCount);\n  }\n\n  // Count the number of paragraphs\n  countParagraphs() {\n    this.state.paragraphsCount = this.state.essayText.split(/\\n/).length;\n  }\n\n  // ------ STATUS: NOT FINISHED ---------\n  /* IDEEA:\n    - Check words against normal dictionary ( make my own function )\n  */\n  //  V1, using one library\n  // checkSpelling() {\n  //   const spelling = require(\"spelling\");\n  //   const dictionary = require(\"./dictionaries/en_US.js\");\n  //   const dict = new spelling(dictionary);\n\n  //   // Remove all symbols from the essay to allow it to be checked for spelling mistakes( while acounting for \"'\" and \"-\" inside names )\n  //   let formattedEssay = this.state.essayText.replace(/[^a-zA-Z0-9 '\\-]/g, \"\");\n\n  //   // Turn the essay into an array of individual words, to be checked for spelling against a dictionary\n  //   formattedEssay = formattedEssay.split(/\\s+/);\n\n  //   // Remove double spaces from the essay\n  //   console.log(\"\\nFormatedEssay:\\n\", formattedEssay);\n  //   // Iterate through the essay and check each word for spelling\n  //   formattedEssay.forEach((element) => {\n  //     console.log(\"\\n\\n\");\n  //     // console.log(element);\n  //     dict.lookup(element);\n  //     if (dict.lookup(element).found) {\n  //       // console.log(element, \" speelled correcty!\");\n  //     } else {\n  //       // If the word is spelled incorrectly, reflect it inside the state\n  //       this.state.spellingMistakesCount += 1;\n  //       console.log(\"word: \", element, \" spelled incorrectly\");\n  //     }\n  //   });\n  //   console.log(\n  //     \"\\nNumber of spelling mistakes!:\",\n  //     this.state.spellingMistakesCount\n  //   );\n  // }\n\n  /* TODO\n    - Add errors\n    - add error for when it's empty as well\n  */\n  // Function to check whether the number of words inside the text is in the range expected by the lecturer\n  checkWordsRange() {\n    // Start by checking that the input provided by the lecturer is a number\n\n    console.log(/^\\d+$/.test(this.state.minNumberWords));\n    console.log(/^\\d+$/.test(this.state.maxNumberWords));\n    console.log(\n      this.state.essayWordCount,\n      this.state.minNumberWords,\n      this.state.maxNumberWords\n    );\n\n    // If both input are numbers, continue with the function. Otherwisem throw and error\n    if (\n      /^\\d+$/.test(this.state.minNumberWords) &&\n      /^\\d+$/.test(this.state.maxNumberWords)\n    ) {\n      console.log(\"Both inputs are correct!\");\n      // Check whether the essay is within range\n      if (\n        this.state.essayWordCount > this.state.minNumberWords &&\n        this.state.essayWordCount < this.state.maxNumberWords\n      ) {\n        console.log(\"Essay word count between range!\");\n      }\n    } else {\n      console.log(\"One or both inputs incorrect! Try again\");\n    }\n  }\n\n  render() {\n    if (this.state.isLoading) {\n      return (\n        <View>\n          <Text>Loading..</Text>\n        </View>\n      );\n    }\n    // Display if the the page is ready\n    else {\n      return (\n        <View style={styles.body}>\n          <Text style={styles.title}>AUTOMATED ESSAY MARKING SYSTEM</Text>\n          <View style={styles.container}>\n            <View style={styles.row}>\n              <Text style={styles.subtitle}>INSERT ESSAY</Text>\n            </View>\n\n            <View style={styles.row}>\n              <TextInput\n                style={styles.input}\n                multiline={true}\n                onChangeText={(essayText) => this.setState({ essayText })}\n                value={this.state.essayText}\n              />\n            </View>\n\n            <View style={styles.row}>\n              <Text style={styles.subtitle}>INSERT TOPIC RELATED WORDS</Text>\n            </View>\n            <View style={styles.row}>\n              <View>\n                <Text style={styles.label}>Key term 1:</Text>\n                <TextInput\n                  style={styles.lecturerInput}\n                  onChangeText={(lecturerInput1) =>\n                    this.setState({ lecturerInput1 })\n                  }\n                  value={this.state.lecturerInput1}\n                ></TextInput>\n              </View>\n              <View>\n                <Text style={styles.label}>Key term 2:</Text>\n                <TextInput\n                  style={styles.lecturerInput}\n                  onChangeText={(lecturerInput2) =>\n                    this.setState({ lecturerInput2 })\n                  }\n                  value={this.state.lecturerInput2}\n                ></TextInput>\n              </View>\n              <View>\n                <Text style={styles.label}>Key term 3:</Text>\n                <TextInput\n                  style={styles.lecturerInput}\n                  onChangeText={(lecturerInput3) =>\n                    this.setState({ lecturerInput3 })\n                  }\n                  value={this.state.lecturerInput3}\n                ></TextInput>\n              </View>\n              <View>\n                <Text style={styles.label}>Key term 4:</Text>\n                <TextInput\n                  style={styles.lecturerInput}\n                  onChangeText={(lecturerInput4) =>\n                    this.setState({ lecturerInput4 })\n                  }\n                  value={this.state.lecturerInput4}\n                ></TextInput>\n              </View>\n              <View>\n                <Text style={styles.label}>Key term 5:</Text>\n                <TextInput\n                  style={styles.lecturerInput}\n                  onChangeText={(lecturerInput5) =>\n                    this.setState({ lecturerInput5 })\n                  }\n                  value={this.state.lecturerInput5}\n                ></TextInput>\n              </View>\n            </View>\n\n            <View style={styles.row}>\n              <Text style={styles.subtitle}>INSERT TOPIC RELATED PHRASES</Text>\n            </View>\n            <View style={styles.row}>\n              <View>\n                <Text style={styles.label}>Key phrase 1:</Text>\n                <TextInput\n                  style={styles.lecturerInput}\n                  onChangeText={(lecturerInputPhrase1) =>\n                    this.setState({ lecturerInputPhrase1 })\n                  }\n                  value={this.state.lecturerInputPhrase1}\n                ></TextInput>\n              </View>\n              <View>\n                <Text style={styles.label}>Key phrase 2:</Text>\n                <TextInput\n                  style={styles.lecturerInput}\n                  onChangeText={(lecturerInputPhrase2) =>\n                    this.setState({ lecturerInputPhrase2 })\n                  }\n                  value={this.state.lecturerInputPhrase2}\n                ></TextInput>\n              </View>\n              <View>\n                <Text style={styles.label}>Key phrase 3:</Text>\n                <TextInput\n                  style={styles.lecturerInput}\n                  onChangeText={(lecturerInputPhrase3) =>\n                    this.setState({ lecturerInputPhrase3 })\n                  }\n                  value={this.state.lecturerInputPhrase3}\n                ></TextInput>\n              </View>\n              <View>\n                <Text style={styles.label}>Key phrase 4:</Text>\n                <TextInput\n                  style={styles.lecturerInput}\n                  onChangeText={(lecturerInputPhrase4) =>\n                    this.setState({ lecturerInputPhrase4 })\n                  }\n                  value={this.state.lecturerInputPhrase4}\n                ></TextInput>\n              </View>\n              <View>\n                <Text style={styles.label}>Key phrase 5:</Text>\n                <TextInput\n                  style={styles.lecturerInput}\n                  onChangeText={(lecturerInputPhrase5) =>\n                    this.setState({ lecturerInputPhrase5 })\n                  }\n                  value={this.state.lecturerInputPhrase5}\n                ></TextInput>\n              </View>\n            </View>\n\n            {/* Range oof words number */}\n            <View style={styles.row}>\n              <Text style={styles.subtitle}>\n                INSERT EXPECTED WORD COUNT RANGE\n              </Text>\n            </View>\n            <View style={styles.rowStart}>\n              <View>\n                <Text style={styles.label}>Min:</Text>\n                <TextInput\n                  style={styles.lecturerInput}\n                  onChangeText={(minNumberWords) =>\n                    this.setState({ minNumberWords })\n                  }\n                  value={this.state.minNumberWords}\n                  keyboardType=\"numeric\"\n                  maxLength={5}\n                ></TextInput>\n              </View>\n              <View>\n                <Text style={styles.label}>Max:</Text>\n                <TextInput\n                  style={styles.lecturerInput}\n                  onChangeText={(maxNumberWords) =>\n                    this.setState({ maxNumberWords })\n                  }\n                  value={this.state.maxNumberWords}\n                  keyboardType=\"numeric\"\n                  maxLength={5}\n                ></TextInput>\n              </View>\n            </View>\n\n            <View style={styles.rowEnd}>\n              {/* <TouchableOpacity style={styles.primaryButton}>\n                <Text style={styles.buttonText}>{\"ESSAY TYPE\"}</Text>\n              </TouchableOpacity> */}\n\n              <TouchableOpacity\n                style={styles.primaryButton}\n                onPress={() => this.processText()}\n              >\n                <Text style={styles.buttonText}>{\"SUBMIT\"}</Text>\n              </TouchableOpacity>\n            </View>\n          </View>\n        </View>\n      );\n    }\n  }\n}\n\nexport default HomeScreen;\n\nconst styles = StyleSheet.create({\n  body: {\n    backgroundColor: \"#F5F5F5\",\n    minHeight: \"100%\",\n  },\n  input: {\n    height: 500,\n    fontSize: 16, // CHANGE\n    padding: 10,\n    backgroundColor: \"#ffffff\",\n    width: \"100%\",\n    borderWidth: 3,\n    borderColor: \"#ABABAB\",\n    boxShadow: \"0px 4px 4px rgba(0, 0, 0, 0.25)\",\n    color: \"#444444\",\n    lineHeight: 25,\n  },\n\n  container: {\n    // backgroundColor: \"#F1F1F1\",\n    flex: 1,\n    flexDirection: \"column\",\n    alignItems: \"center\", // keep content in the middle\n    marginTop: 10,\n    maxWidth: 1100,\n    width: \"100%\",\n    margin: \"auto\",\n    marginBottom: 50,\n    backgroundColor: \"#F1F1F1\",\n\n    // borderLeftWidth: 3,\n    // borderLeftColor: \"#E3E3E3\",\n    paddingLeft: 40,\n    // borderRightWidth: 3,\n    // borderRightColor: \"#E3E3E3\",\n    paddingRight: 40,\n    paddingBottom: 20,\n    boxShadow: \"0px 4px 10px rgba(0, 0, 0, 0.25)\",\n\n    // minWidth: \"80vw\",\n  },\n  row: {\n    // backgroundColor: \"#E9E9E9\",\n    flexDirection: \"row\",\n    // minWidth: 600,\n    justifyContent: \"space-between\",\n    // marginTop: 40,\n    width: \"100%\",\n    flexWrap: \"wrap\",\n    gap: 8,\n  },\n  rowEnd: {\n    flexDirection: \"row\",\n    justifyContent: \"end\",\n    width: \"100%\",\n  },\n  rowStart: {\n    flexDirection: \"row\",\n    // minWidth: 600,\n    // justifyContent: \"space-between\",\n    // marginTop: 40,\n    width: \"100%\",\n    flexWrap: \"wrap\",\n    gap: 25,\n    marginBottom: 25,\n  },\n  rowVertical: {\n    flexDirection: \"columns\",\n    // minWidth: 600,\n    justifyContent: \"space-between\",\n    marginTop: 40,\n    backgroundColor: \"#E9E9E9\",\n  },\n  lecturerInput: {\n    backgroundColor: \"#ffffff\",\n    padding: 7,\n    marginBottom: 10,\n    borderWidth: 2,\n    borderColor: \"#ABABAB\",\n    color: \"#444444\",\n  },\n  title: {\n    backgroundColor: \"#E9E9E9\",\n\n    fontSize: 30,\n    width: \"100%\",\n    textAlign: \"center\",\n    padding: 40,\n    fontStyle: \"normal\",\n    fontWeight: 600,\n    fontSize: 40,\n    lineHeight: 47,\n    /* identical to box height */\n    letterSpacing: \"0.325em\",\n    color: \"#2EA7EB\",\n\n    boxShadow: \"0px 10px 5px rgba(0, 0, 0, 0.25)\",\n    marginBottom: 20,\n  },\n  primaryButton: {\n    textAlign: \"center\",\n    minWidth: 169,\n    padding: 8,\n    backgroundColor: \"#FFFFFF\",\n    borderWidth: 2.5,\n    borderColor: \"#2EA7EB\",\n  },\n\n  buttonText: {\n    color: \"#2EA7EB\",\n\n    fontSize: \"14\",\n    // fontamily: Roboto-Medium;\n    letterSpacing: 1.25,\n  },\n  subtitle: {\n    fontStyle: \"normal\",\n    fontWeight: 400,\n    fontSize: 20,\n    lineHeight: 18,\n    letterSpacing: \"0.16em\",\n    marginTop: 30,\n    marginBottom: 10,\n    // color: \"#444444\",\n    color: \"#2EA7EB\",\n  },\n  label: {\n    fontStyle: \"normal\",\n    fontWeight: 400,\n    lineHeight: 18,\n    // letterSpacing: \"0.16em\",\n\n    marginBottom: 2,\n    color: \"#444444\",\n  },\n});\n"]},"metadata":{},"sourceType":"module"}